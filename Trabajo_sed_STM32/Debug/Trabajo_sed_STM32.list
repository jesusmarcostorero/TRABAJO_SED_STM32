
Trabajo_sed_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800477c  0800477c  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004784  08004784  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800478c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020048  2**0
                  CONTENTS
 10 .bss          0000025c  20000048  20000048  00020048  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  00020048  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb24  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c5e  00000000  00000000  0002cb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0002e800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b60  00000000  00000000  0002f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215ff  00000000  00000000  0002ff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3c9  00000000  00000000  00051597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2aea  00000000  00000000  0005e960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013144a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000333c  00000000  00000000  001314a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800474c 	.word	0x0800474c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	0800474c 	.word	0x0800474c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
volatile int flag=0;
volatile int state=1;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0 && state == 1){
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d109      	bne.n	80004e4 <HAL_GPIO_EXTI_Callback+0x24>
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_GPIO_EXTI_Callback+0x2c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d105      	bne.n	80004e4 <HAL_GPIO_EXTI_Callback+0x24>
		HAL_TIM_Base_Start_IT(&htim1);
 80004d8:	4805      	ldr	r0, [pc, #20]	; (80004f0 <HAL_GPIO_EXTI_Callback+0x30>)
 80004da:	f003 f8f1 	bl	80036c0 <HAL_TIM_Base_Start_IT>
		state = 0;
 80004de:	4b03      	ldr	r3, [pc, #12]	; (80004ec <HAL_GPIO_EXTI_Callback+0x2c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
	}
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000000 	.word	0x20000000
 80004f0:	200001f8 	.word	0x200001f8

080004f4 <filtro_l>:
float a2_pa = -0.09534175821687875;
float b1_pa = -1.7891079133475518;
float b2_pa = 0.8093164835662425;

//filtros para audio
int filtro_l(int muestra){
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

	//formula del filtro
	float muestra_in = (float) muestra;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	ee07 3a90 	vmov	s15, r3
 8000502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000506:	edc7 7a03 	vstr	s15, [r7, #12]
	float muestra_out = a0 * muestra_in + a1 * lx_1 + a2 * lx_2 - b1 * ly_1 - b2 * ly_2;
 800050a:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <filtro_l+0xac>)
 800050c:	ed93 7a00 	vldr	s14, [r3]
 8000510:	edd7 7a03 	vldr	s15, [r7, #12]
 8000514:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000518:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <filtro_l+0xb0>)
 800051a:	edd3 6a00 	vldr	s13, [r3]
 800051e:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <filtro_l+0xb4>)
 8000520:	edd3 7a00 	vldr	s15, [r3]
 8000524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000528:	ee37 7a27 	vadd.f32	s14, s14, s15
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <filtro_l+0xb8>)
 800052e:	edd3 6a00 	vldr	s13, [r3]
 8000532:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <filtro_l+0xbc>)
 8000534:	edd3 7a00 	vldr	s15, [r3]
 8000538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800053c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <filtro_l+0xc0>)
 8000542:	edd3 6a00 	vldr	s13, [r3]
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <filtro_l+0xc4>)
 8000548:	edd3 7a00 	vldr	s15, [r3]
 800054c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000550:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <filtro_l+0xc8>)
 8000556:	edd3 6a00 	vldr	s13, [r3]
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <filtro_l+0xcc>)
 800055c:	edd3 7a00 	vldr	s15, [r3]
 8000560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000568:	edc7 7a02 	vstr	s15, [r7, #8]
	//mover valores un puesto
	lx_2 = lx_1;
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <filtro_l+0xb4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <filtro_l+0xbc>)
 8000572:	6013      	str	r3, [r2, #0]
	lx_1 = muestra_in;
 8000574:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <filtro_l+0xb4>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6013      	str	r3, [r2, #0]
	ly_2 = ly_1;
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <filtro_l+0xc4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <filtro_l+0xcc>)
 8000580:	6013      	str	r3, [r2, #0]
	ly_1 = muestra_out;
 8000582:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <filtro_l+0xc4>)
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	6013      	str	r3, [r2, #0]
	//devolver valor
	return (int) muestra_out;
 8000588:	edd7 7a02 	vldr	s15, [r7, #8]
 800058c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000590:	ee17 3a90 	vmov	r3, s15
}
 8000594:	4618      	mov	r0, r3
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000008 	.word	0x20000008
 80005a8:	200001f0 	.word	0x200001f0
 80005ac:	2000000c 	.word	0x2000000c
 80005b0:	2000029c 	.word	0x2000029c
 80005b4:	20000010 	.word	0x20000010
 80005b8:	20000294 	.word	0x20000294
 80005bc:	20000014 	.word	0x20000014
 80005c0:	200000bc 	.word	0x200000bc

080005c4 <filtro_r>:

int filtro_r(int muestra){
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

	//formula del filtro
	float muestra_in = (float) muestra;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	ee07 3a90 	vmov	s15, r3
 80005d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005d6:	edc7 7a03 	vstr	s15, [r7, #12]
	float muestra_out = a0 * muestra_in + a1 * rx_1 + a2 * rx_2 - b1 * ry_1 - b2 * ry_2;
 80005da:	4b25      	ldr	r3, [pc, #148]	; (8000670 <filtro_r+0xac>)
 80005dc:	ed93 7a00 	vldr	s14, [r3]
 80005e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80005e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <filtro_r+0xb0>)
 80005ea:	edd3 6a00 	vldr	s13, [r3]
 80005ee:	4b22      	ldr	r3, [pc, #136]	; (8000678 <filtro_r+0xb4>)
 80005f0:	edd3 7a00 	vldr	s15, [r3]
 80005f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <filtro_r+0xb8>)
 80005fe:	edd3 6a00 	vldr	s13, [r3]
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <filtro_r+0xbc>)
 8000604:	edd3 7a00 	vldr	s15, [r3]
 8000608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800060c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <filtro_r+0xc0>)
 8000612:	edd3 6a00 	vldr	s13, [r3]
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <filtro_r+0xc4>)
 8000618:	edd3 7a00 	vldr	s15, [r3]
 800061c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000620:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <filtro_r+0xc8>)
 8000626:	edd3 6a00 	vldr	s13, [r3]
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <filtro_r+0xcc>)
 800062c:	edd3 7a00 	vldr	s15, [r3]
 8000630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000638:	edc7 7a02 	vstr	s15, [r7, #8]
	//mover valores un puesto
	rx_2 = rx_1;
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <filtro_r+0xb4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <filtro_r+0xbc>)
 8000642:	6013      	str	r3, [r2, #0]
	rx_1 = muestra_in;
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <filtro_r+0xb4>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	6013      	str	r3, [r2, #0]
	ry_2 = ry_1;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <filtro_r+0xc4>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a10      	ldr	r2, [pc, #64]	; (8000690 <filtro_r+0xcc>)
 8000650:	6013      	str	r3, [r2, #0]
	ry_1 = muestra_out;
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <filtro_r+0xc4>)
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	6013      	str	r3, [r2, #0]
	//devolver valor
	return (int) muestra_out;
 8000658:	edd7 7a02 	vldr	s15, [r7, #8]
 800065c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000660:	ee17 3a90 	vmov	r3, s15
}
 8000664:	4618      	mov	r0, r3
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	20000004 	.word	0x20000004
 8000674:	20000008 	.word	0x20000008
 8000678:	20000240 	.word	0x20000240
 800067c:	2000000c 	.word	0x2000000c
 8000680:	200000cc 	.word	0x200000cc
 8000684:	20000010 	.word	0x20000010
 8000688:	200000c4 	.word	0x200000c4
 800068c:	20000014 	.word	0x20000014
 8000690:	200000c0 	.word	0x200000c0

08000694 <filtro_pb>:

//filtro paso bajo (led rojo)
int filtro_pb(int muestra){
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

	//formula del filtro
	float muestra_in = (float) muestra;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	ee07 3a90 	vmov	s15, r3
 80006a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a6:	edc7 7a03 	vstr	s15, [r7, #12]
	float muestra_out = a0_pb * muestra_in + a1_pb * pbx_1 + a2_pb * pbx_2 - b1_pb * pby_1 - b2_pb * pby_2;
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <filtro_pb+0xac>)
 80006ac:	ed93 7a00 	vldr	s14, [r3]
 80006b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80006b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <filtro_pb+0xb0>)
 80006ba:	edd3 6a00 	vldr	s13, [r3]
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <filtro_pb+0xb4>)
 80006c0:	edd3 7a00 	vldr	s15, [r3]
 80006c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <filtro_pb+0xb8>)
 80006ce:	edd3 6a00 	vldr	s13, [r3]
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <filtro_pb+0xbc>)
 80006d4:	edd3 7a00 	vldr	s15, [r3]
 80006d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <filtro_pb+0xc0>)
 80006e2:	edd3 6a00 	vldr	s13, [r3]
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <filtro_pb+0xc4>)
 80006e8:	edd3 7a00 	vldr	s15, [r3]
 80006ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <filtro_pb+0xc8>)
 80006f6:	edd3 6a00 	vldr	s13, [r3]
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <filtro_pb+0xcc>)
 80006fc:	edd3 7a00 	vldr	s15, [r3]
 8000700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000708:	edc7 7a02 	vstr	s15, [r7, #8]
	//mover valores un puesto
	pbx_2 = pbx_1;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <filtro_pb+0xb4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a0f      	ldr	r2, [pc, #60]	; (8000750 <filtro_pb+0xbc>)
 8000712:	6013      	str	r3, [r2, #0]
	pbx_1 = muestra_in;
 8000714:	4a0c      	ldr	r2, [pc, #48]	; (8000748 <filtro_pb+0xb4>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6013      	str	r3, [r2, #0]
	pby_2 = pby_1;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <filtro_pb+0xc4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a10      	ldr	r2, [pc, #64]	; (8000760 <filtro_pb+0xcc>)
 8000720:	6013      	str	r3, [r2, #0]
	pby_1 = muestra_out;
 8000722:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <filtro_pb+0xc4>)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	6013      	str	r3, [r2, #0]
	//devolver valor
	return (int) muestra_out;
 8000728:	edd7 7a02 	vldr	s15, [r7, #8]
 800072c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000730:	ee17 3a90 	vmov	r3, s15
}
 8000734:	4618      	mov	r0, r3
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	20000018 	.word	0x20000018
 8000744:	2000001c 	.word	0x2000001c
 8000748:	20000298 	.word	0x20000298
 800074c:	20000020 	.word	0x20000020
 8000750:	200000c8 	.word	0x200000c8
 8000754:	20000024 	.word	0x20000024
 8000758:	20000120 	.word	0x20000120
 800075c:	20000028 	.word	0x20000028
 8000760:	20000244 	.word	0x20000244

08000764 <filtro_pa>:

//filtro paso alto (led azul)
int filtro_pa(int muestra){
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

	//formula del filtro
	float muestra_in = (float) muestra;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	ee07 3a90 	vmov	s15, r3
 8000772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000776:	edc7 7a03 	vstr	s15, [r7, #12]
	float muestra_out = a0_pa * muestra_in + a1_pa * pax_1 + a2_pa * pax_2 - b1_pa * pay_1 - b2_pa * pay_2;
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <filtro_pa+0xac>)
 800077c:	ed93 7a00 	vldr	s14, [r3]
 8000780:	edd7 7a03 	vldr	s15, [r7, #12]
 8000784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <filtro_pa+0xb0>)
 800078a:	edd3 6a00 	vldr	s13, [r3]
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <filtro_pa+0xb4>)
 8000790:	edd3 7a00 	vldr	s15, [r3]
 8000794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000798:	ee37 7a27 	vadd.f32	s14, s14, s15
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <filtro_pa+0xb8>)
 800079e:	edd3 6a00 	vldr	s13, [r3]
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <filtro_pa+0xbc>)
 80007a4:	edd3 7a00 	vldr	s15, [r3]
 80007a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <filtro_pa+0xc0>)
 80007b2:	edd3 6a00 	vldr	s13, [r3]
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <filtro_pa+0xc4>)
 80007b8:	edd3 7a00 	vldr	s15, [r3]
 80007bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <filtro_pa+0xc8>)
 80007c6:	edd3 6a00 	vldr	s13, [r3]
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <filtro_pa+0xcc>)
 80007cc:	edd3 7a00 	vldr	s15, [r3]
 80007d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007d8:	edc7 7a02 	vstr	s15, [r7, #8]
	//mover valores un puesto
	pax_2 = pax_1;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <filtro_pa+0xb4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <filtro_pa+0xbc>)
 80007e2:	6013      	str	r3, [r2, #0]
	pax_1 = muestra_in;
 80007e4:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <filtro_pa+0xb4>)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6013      	str	r3, [r2, #0]
	pay_2 = pay_1;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <filtro_pa+0xc4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <filtro_pa+0xcc>)
 80007f0:	6013      	str	r3, [r2, #0]
	pay_1 = muestra_out;
 80007f2:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <filtro_pa+0xc4>)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	6013      	str	r3, [r2, #0]
	//devolver valor
	return (int) muestra_out;
 80007f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80007fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000800:	ee17 3a90 	vmov	r3, s15
}
 8000804:	4618      	mov	r0, r3
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	2000002c 	.word	0x2000002c
 8000814:	20000068 	.word	0x20000068
 8000818:	20000070 	.word	0x20000070
 800081c:	20000030 	.word	0x20000030
 8000820:	20000248 	.word	0x20000248
 8000824:	20000034 	.word	0x20000034
 8000828:	20000170 	.word	0x20000170
 800082c:	20000038 	.word	0x20000038
 8000830:	200000d0 	.word	0x200000d0

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 fee8 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f836 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 fade 	bl	8000e00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000844:	f000 fabc 	bl	8000dc0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000848:	f000 f89a 	bl	8000980 <MX_ADC1_Init>
  MX_TIM2_Init();
 800084c:	f000 f980 	bl	8000b50 <MX_TIM2_Init>
  MX_DAC_Init();
 8000850:	f000 f8f8 	bl	8000a44 <MX_DAC_Init>
  MX_TIM3_Init();
 8000854:	f000 f9c8 	bl	8000be8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000858:	f000 fa3c 	bl	8000cd4 <MX_TIM4_Init>
  MX_TIM1_Init();
 800085c:	f000 f926 	bl	8000aac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <main+0x60>)
 8000862:	f002 ff2d 	bl	80036c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000866:	2100      	movs	r1, #0
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <main+0x64>)
 800086a:	f003 f821 	bl	80038b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800086e:	2104      	movs	r1, #4
 8000870:	480a      	ldr	r0, [pc, #40]	; (800089c <main+0x68>)
 8000872:	f003 f81d 	bl	80038b0 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, buffer_in, 2);
 8000876:	2202      	movs	r2, #2
 8000878:	4909      	ldr	r1, [pc, #36]	; (80008a0 <main+0x6c>)
 800087a:	480a      	ldr	r0, [pc, #40]	; (80008a4 <main+0x70>)
 800087c:	f000 ff7c 	bl	8001778 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000880:	2100      	movs	r1, #0
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <main+0x74>)
 8000884:	f001 fc6f 	bl	8002166 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000888:	2110      	movs	r1, #16
 800088a:	4807      	ldr	r0, [pc, #28]	; (80008a8 <main+0x74>)
 800088c:	f001 fc6b 	bl	8002166 <HAL_DAC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000890:	e7fe      	b.n	8000890 <main+0x5c>
 8000892:	bf00      	nop
 8000894:	2000024c 	.word	0x2000024c
 8000898:	200000d4 	.word	0x200000d4
 800089c:	20000074 	.word	0x20000074
 80008a0:	200001f4 	.word	0x200001f4
 80008a4:	20000128 	.word	0x20000128
 80008a8:	2000017c 	.word	0x2000017c

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	; 0x50
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	2230      	movs	r2, #48	; 0x30
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f003 ff3e 	bl	800473c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <SystemClock_Config+0xcc>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a27      	ldr	r2, [pc, #156]	; (8000978 <SystemClock_Config+0xcc>)
 80008da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <SystemClock_Config+0xcc>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <SystemClock_Config+0xd0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a21      	ldr	r2, [pc, #132]	; (800097c <SystemClock_Config+0xd0>)
 80008f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <SystemClock_Config+0xd0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000908:	2302      	movs	r3, #2
 800090a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090c:	2301      	movs	r3, #1
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000910:	2310      	movs	r3, #16
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000914:	2302      	movs	r3, #2
 8000916:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000918:	2300      	movs	r3, #0
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800091c:	2308      	movs	r3, #8
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000920:	23a8      	movs	r3, #168	; 0xa8
 8000922:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000928:	2307      	movs	r3, #7
 800092a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	4618      	mov	r0, r3
 8000932:	f002 fa35 	bl	8002da0 <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800093c:	f000 fbfc 	bl	8001138 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000940:	230f      	movs	r3, #15
 8000942:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000944:	2302      	movs	r3, #2
 8000946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800094c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000956:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2105      	movs	r1, #5
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fc96 	bl	8003290 <HAL_RCC_ClockConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800096a:	f000 fbe5 	bl	8001138 <Error_Handler>
  }
}
 800096e:	bf00      	nop
 8000970:	3750      	adds	r7, #80	; 0x50
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40007000 	.word	0x40007000

08000980 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <MX_ADC1_Init+0xbc>)
 8000994:	4a2a      	ldr	r2, [pc, #168]	; (8000a40 <MX_ADC1_Init+0xc0>)
 8000996:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000998:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <MX_ADC1_Init+0xbc>)
 800099a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800099e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80009a0:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <MX_ADC1_Init+0xbc>)
 80009a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009a8:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <MX_ADC1_Init+0xbc>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <MX_ADC1_Init+0xbc>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_ADC1_Init+0xbc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_ADC1_Init+0xbc>)
 80009be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_ADC1_Init+0xbc>)
 80009c6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_ADC1_Init+0xbc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_ADC1_Init+0xbc>)
 80009d4:	2202      	movs	r2, #2
 80009d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_ADC1_Init+0xbc>)
 80009da:	2201      	movs	r2, #1
 80009dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_ADC1_Init+0xbc>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e6:	4815      	ldr	r0, [pc, #84]	; (8000a3c <MX_ADC1_Init+0xbc>)
 80009e8:	f000 fe82 	bl	80016f0 <HAL_ADC_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80009f2:	f000 fba1 	bl	8001138 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	4619      	mov	r1, r3
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_ADC1_Init+0xbc>)
 8000a08:	f000 ffda 	bl	80019c0 <HAL_ADC_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000a12:	f000 fb91 	bl	8001138 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a16:	2303      	movs	r3, #3
 8000a18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <MX_ADC1_Init+0xbc>)
 8000a24:	f000 ffcc 	bl	80019c0 <HAL_ADC_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a2e:	f000 fb83 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000128 	.word	0x20000128
 8000a40:	40012000 	.word	0x40012000

08000a44 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_DAC_Init+0x60>)
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <MX_DAC_Init+0x64>)
 8000a56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <MX_DAC_Init+0x60>)
 8000a5a:	f001 fb62 	bl	8002122 <HAL_DAC_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000a64:	f000 fb68 	bl	8001138 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000a68:	2324      	movs	r3, #36	; 0x24
 8000a6a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	4619      	mov	r1, r3
 8000a76:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <MX_DAC_Init+0x60>)
 8000a78:	f001 fbec 	bl	8002254 <HAL_DAC_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000a82:	f000 fb59 	bl	8001138 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	2210      	movs	r2, #16
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_DAC_Init+0x60>)
 8000a8e:	f001 fbe1 	bl	8002254 <HAL_DAC_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000a98:	f000 fb4e 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000017c 	.word	0x2000017c
 8000aa8:	40007400 	.word	0x40007400

08000aac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_TIM1_Init+0x9c>)
 8000aca:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <MX_TIM1_Init+0xa0>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_TIM1_Init+0x9c>)
 8000ad0:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8000ad4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_TIM1_Init+0x9c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_TIM1_Init+0x9c>)
 8000ade:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ae2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_TIM1_Init+0x9c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_TIM1_Init+0x9c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_TIM1_Init+0x9c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af6:	4814      	ldr	r0, [pc, #80]	; (8000b48 <MX_TIM1_Init+0x9c>)
 8000af8:	f002 fd92 	bl	8003620 <HAL_TIM_Base_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b02:	f000 fb19 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	4619      	mov	r1, r3
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_TIM1_Init+0x9c>)
 8000b14:	f003 f95e 	bl	8003dd4 <HAL_TIM_ConfigClockSource>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b1e:	f000 fb0b 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <MX_TIM1_Init+0x9c>)
 8000b30:	f003 fd50 	bl	80045d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b3a:	f000 fafd 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200001f8 	.word	0x200001f8
 8000b4c:	40010000 	.word	0x40010000

08000b50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b94:	4813      	ldr	r0, [pc, #76]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b96:	f002 fd43 	bl	8003620 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ba0:	f000 faca 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000bb2:	f003 f90f 	bl	8003dd4 <HAL_TIM_ConfigClockSource>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bbc:	f000 fabc 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bc0:	2320      	movs	r3, #32
 8000bc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000bce:	f003 fd01 	bl	80045d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bd8:	f000 faae 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000024c 	.word	0x2000024c

08000be8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	; 0x38
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	f107 0320 	add.w	r3, r7, #32
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c18:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <MX_TIM3_Init+0xe4>)
 8000c1a:	4a2d      	ldr	r2, [pc, #180]	; (8000cd0 <MX_TIM3_Init+0xe8>)
 8000c1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000c1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <MX_TIM3_Init+0xe4>)
 8000c20:	2263      	movs	r2, #99	; 0x63
 8000c22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <MX_TIM3_Init+0xe4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <MX_TIM3_Init+0xe4>)
 8000c2c:	2209      	movs	r2, #9
 8000c2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <MX_TIM3_Init+0xe4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <MX_TIM3_Init+0xe4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c3c:	4823      	ldr	r0, [pc, #140]	; (8000ccc <MX_TIM3_Init+0xe4>)
 8000c3e:	f002 fcef 	bl	8003620 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000c48:	f000 fa76 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c56:	4619      	mov	r1, r3
 8000c58:	481c      	ldr	r0, [pc, #112]	; (8000ccc <MX_TIM3_Init+0xe4>)
 8000c5a:	f003 f8bb 	bl	8003dd4 <HAL_TIM_ConfigClockSource>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000c64:	f000 fa68 	bl	8001138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c68:	4818      	ldr	r0, [pc, #96]	; (8000ccc <MX_TIM3_Init+0xe4>)
 8000c6a:	f002 fdc8 	bl	80037fe <HAL_TIM_PWM_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000c74:	f000 fa60 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c80:	f107 0320 	add.w	r3, r7, #32
 8000c84:	4619      	mov	r1, r3
 8000c86:	4811      	ldr	r0, [pc, #68]	; (8000ccc <MX_TIM3_Init+0xe4>)
 8000c88:	f003 fca4 	bl	80045d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000c92:	f000 fa51 	bl	8001138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c96:	2360      	movs	r3, #96	; 0x60
 8000c98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	4619      	mov	r1, r3
 8000cac:	4807      	ldr	r0, [pc, #28]	; (8000ccc <MX_TIM3_Init+0xe4>)
 8000cae:	f002 ffcf 	bl	8003c50 <HAL_TIM_PWM_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000cb8:	f000 fa3e 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <MX_TIM3_Init+0xe4>)
 8000cbe:	f000 fba3 	bl	8001408 <HAL_TIM_MspPostInit>

}
 8000cc2:	bf00      	nop
 8000cc4:	3738      	adds	r7, #56	; 0x38
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000d4 	.word	0x200000d4
 8000cd0:	40000400 	.word	0x40000400

08000cd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08e      	sub	sp, #56	; 0x38
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	f107 0320 	add.w	r3, r7, #32
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	615a      	str	r2, [r3, #20]
 8000d02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d04:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <MX_TIM4_Init+0xe4>)
 8000d06:	4a2d      	ldr	r2, [pc, #180]	; (8000dbc <MX_TIM4_Init+0xe8>)
 8000d08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8000d0a:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <MX_TIM4_Init+0xe4>)
 8000d0c:	2263      	movs	r2, #99	; 0x63
 8000d0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <MX_TIM4_Init+0xe4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8000d16:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <MX_TIM4_Init+0xe4>)
 8000d18:	2209      	movs	r2, #9
 8000d1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <MX_TIM4_Init+0xe4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <MX_TIM4_Init+0xe4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d28:	4823      	ldr	r0, [pc, #140]	; (8000db8 <MX_TIM4_Init+0xe4>)
 8000d2a:	f002 fc79 	bl	8003620 <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000d34:	f000 fa00 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d42:	4619      	mov	r1, r3
 8000d44:	481c      	ldr	r0, [pc, #112]	; (8000db8 <MX_TIM4_Init+0xe4>)
 8000d46:	f003 f845 	bl	8003dd4 <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000d50:	f000 f9f2 	bl	8001138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d54:	4818      	ldr	r0, [pc, #96]	; (8000db8 <MX_TIM4_Init+0xe4>)
 8000d56:	f002 fd52 	bl	80037fe <HAL_TIM_PWM_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000d60:	f000 f9ea 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	4619      	mov	r1, r3
 8000d72:	4811      	ldr	r0, [pc, #68]	; (8000db8 <MX_TIM4_Init+0xe4>)
 8000d74:	f003 fc2e 	bl	80045d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000d7e:	f000 f9db 	bl	8001138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d82:	2360      	movs	r3, #96	; 0x60
 8000d84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2204      	movs	r2, #4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4807      	ldr	r0, [pc, #28]	; (8000db8 <MX_TIM4_Init+0xe4>)
 8000d9a:	f002 ff59 	bl	8003c50 <HAL_TIM_PWM_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000da4:	f000 f9c8 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <MX_TIM4_Init+0xe4>)
 8000daa:	f000 fb2d 	bl	8001408 <HAL_TIM_MspPostInit>

}
 8000dae:	bf00      	nop
 8000db0:	3738      	adds	r7, #56	; 0x38
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000074 	.word	0x20000074
 8000dbc:	40000800 	.word	0x40000800

08000dc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_DMA_Init+0x3c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <MX_DMA_Init+0x3c>)
 8000dd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_DMA_Init+0x3c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2038      	movs	r0, #56	; 0x38
 8000de8:	f001 f965 	bl	80020b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000dec:	2038      	movs	r0, #56	; 0x38
 8000dee:	f001 f97e 	bl	80020ee <HAL_NVIC_EnableIRQ>

}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800

08000e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <MX_GPIO_Init+0xc8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a2a      	ldr	r2, [pc, #168]	; (8000ec8 <MX_GPIO_Init+0xc8>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_GPIO_Init+0xc8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <MX_GPIO_Init+0xc8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a23      	ldr	r2, [pc, #140]	; (8000ec8 <MX_GPIO_Init+0xc8>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <MX_GPIO_Init+0xc8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <MX_GPIO_Init+0xc8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <MX_GPIO_Init+0xc8>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_GPIO_Init+0xc8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000e70:	4816      	ldr	r0, [pc, #88]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e72:	f001 ff63 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e76:	2301      	movs	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e8c:	f001 fda2 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000e90:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000e94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4808      	ldr	r0, [pc, #32]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000eaa:	f001 fd93 	bl	80029d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2006      	movs	r0, #6
 8000eb4:	f001 f8ff 	bl	80020b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000eb8:	2006      	movs	r0, #6
 8000eba:	f001 f918 	bl	80020ee <HAL_NVIC_EnableIRQ>

}
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d118      	bne.n	8000f18 <HAL_TIM_PeriodElapsedCallback+0x44>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	480e      	ldr	r0, [pc, #56]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000eea:	f001 ff0f 	bl	8002d0c <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d111      	bne.n	8000f18 <HAL_TIM_PeriodElapsedCallback+0x44>
			flag++;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000efc:	6013      	str	r3, [r2, #0]
			if (flag > 2){
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	dd02      	ble.n	8000f0c <HAL_TIM_PeriodElapsedCallback+0x38>
				flag = 0;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
			}
			state = 1;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim1);
 8000f12:	4807      	ldr	r0, [pc, #28]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f14:	f002 fc44 	bl	80037a0 <HAL_TIM_Base_Stop_IT>
		}
	}
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40010000 	.word	0x40010000
 8000f24:	40020000 	.word	0x40020000
 8000f28:	20000064 	.word	0x20000064
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	200001f8 	.word	0x200001f8

08000f34 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	int muestra_l = buffer_in[0];//canal l
 8000f3c:	4b73      	ldr	r3, [pc, #460]	; (800110c <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	617b      	str	r3, [r7, #20]
	int muestra_r = buffer_in[1];//canal r
 8000f44:	4b71      	ldr	r3, [pc, #452]	; (800110c <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000f46:	785b      	ldrb	r3, [r3, #1]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	613b      	str	r3, [r7, #16]
	senal_mono = (buffer_in[0] >> 1) + (buffer_in[1] >> 1) - 141;
 8000f4c:	4b6f      	ldr	r3, [pc, #444]	; (800110c <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	085b      	lsrs	r3, r3, #1
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b6c      	ldr	r3, [pc, #432]	; (800110c <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000f5a:	785b      	ldrb	r3, [r3, #1]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	085b      	lsrs	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4413      	add	r3, r2
 8000f64:	3b8d      	subs	r3, #141	; 0x8d
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6e:	4b68      	ldr	r3, [pc, #416]	; (8001110 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000f70:	edc3 7a00 	vstr	s15, [r3]

	//tratamiento de señal para las luces
	int temp_led_bajos = filtro_pb(senal_mono);
 8000f74:	4b66      	ldr	r3, [pc, #408]	; (8001110 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000f76:	edd3 7a00 	vldr	s15, [r3]
 8000f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f7e:	ee17 0a90 	vmov	r0, s15
 8000f82:	f7ff fb87 	bl	8000694 <filtro_pb>
 8000f86:	60f8      	str	r0, [r7, #12]
	int temp_led_agudos = filtro_pa(senal_mono);
 8000f88:	4b61      	ldr	r3, [pc, #388]	; (8001110 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000f8a:	edd3 7a00 	vldr	s15, [r3]
 8000f8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f92:	ee17 0a90 	vmov	r0, s15
 8000f96:	f7ff fbe5 	bl	8000764 <filtro_pa>
 8000f9a:	60b8      	str	r0, [r7, #8]

	//elevar la señal al cuadrado
	temp_led_bajos = temp_led_bajos * temp_led_bajos;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	fb03 f303 	mul.w	r3, r3, r3
 8000fa2:	60fb      	str	r3, [r7, #12]
	temp_led_agudos = temp_led_agudos * temp_led_agudos;
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	fb03 f303 	mul.w	r3, r3, r3
 8000faa:	60bb      	str	r3, [r7, #8]
	//temp_led_bajos *= 4;
	//temp_led_agudos *= 4;

	led_bajos = temp_led_bajos;
 8000fac:	4a59      	ldr	r2, [pc, #356]	; (8001114 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6013      	str	r3, [r2, #0]
	led_agudos = temp_led_agudos;
 8000fb2:	4a59      	ldr	r2, [pc, #356]	; (8001118 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	6013      	str	r3, [r2, #0]

	//filtro para el audio
	switch(flag){
 8000fb8:	4b58      	ldr	r3, [pc, #352]	; (800111c <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d044      	beq.n	800104a <HAL_ADC_ConvCpltCallback+0x116>
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	dc61      	bgt.n	8001088 <HAL_ADC_ConvCpltCallback+0x154>
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <HAL_ADC_ConvCpltCallback+0x9a>
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d01f      	beq.n	800100c <HAL_ADC_ConvCpltCallback+0xd8>
 8000fcc:	e05c      	b.n	8001088 <HAL_ADC_ConvCpltCallback+0x154>
		case 0:
			muestra_l = filtro_l(muestra_l) - 141;
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff fa90 	bl	80004f4 <filtro_l>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	3b8d      	subs	r3, #141	; 0x8d
 8000fd8:	617b      	str	r3, [r7, #20]
			muestra_r = filtro_r(muestra_r) - 141;
 8000fda:	6938      	ldr	r0, [r7, #16]
 8000fdc:	f7ff faf2 	bl	80005c4 <filtro_r>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	3b8d      	subs	r3, #141	; 0x8d
 8000fe4:	613b      	str	r3, [r7, #16]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fec:	484c      	ldr	r0, [pc, #304]	; (8001120 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000fee:	f001 fea5 	bl	8002d3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff8:	4849      	ldr	r0, [pc, #292]	; (8001120 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000ffa:	f001 fe9f 	bl	8002d3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001004:	4846      	ldr	r0, [pc, #280]	; (8001120 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001006:	f001 fe99 	bl	8002d3c <HAL_GPIO_WritePin>
			break;
 800100a:	e03d      	b.n	8001088 <HAL_ADC_ConvCpltCallback+0x154>
		case 1:
			muestra_l = filtro_pb(senal_mono);
 800100c:	4b40      	ldr	r3, [pc, #256]	; (8001110 <HAL_ADC_ConvCpltCallback+0x1dc>)
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001016:	ee17 0a90 	vmov	r0, s15
 800101a:	f7ff fb3b 	bl	8000694 <filtro_pb>
 800101e:	6178      	str	r0, [r7, #20]
			muestra_r = muestra_l;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	613b      	str	r3, [r7, #16]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102a:	483d      	ldr	r0, [pc, #244]	; (8001120 <HAL_ADC_ConvCpltCallback+0x1ec>)
 800102c:	f001 fe86 	bl	8002d3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001036:	483a      	ldr	r0, [pc, #232]	; (8001120 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001038:	f001 fe80 	bl	8002d3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001042:	4837      	ldr	r0, [pc, #220]	; (8001120 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001044:	f001 fe7a 	bl	8002d3c <HAL_GPIO_WritePin>
			break;
 8001048:	e01e      	b.n	8001088 <HAL_ADC_ConvCpltCallback+0x154>
		case 2:
			muestra_l = filtro_pa(senal_mono);
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <HAL_ADC_ConvCpltCallback+0x1dc>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001054:	ee17 0a90 	vmov	r0, s15
 8001058:	f7ff fb84 	bl	8000764 <filtro_pa>
 800105c:	6178      	str	r0, [r7, #20]
			muestra_r = muestra_l;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	613b      	str	r3, [r7, #16]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	482d      	ldr	r0, [pc, #180]	; (8001120 <HAL_ADC_ConvCpltCallback+0x1ec>)
 800106a:	f001 fe67 	bl	8002d3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001074:	482a      	ldr	r0, [pc, #168]	; (8001120 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001076:	f001 fe61 	bl	8002d3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001080:	4827      	ldr	r0, [pc, #156]	; (8001120 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001082:	f001 fe5b 	bl	8002d3c <HAL_GPIO_WritePin>
			break;
 8001086:	bf00      	nop
	}

	//agrandar la señal a 3 bits
	muestra_l *= 4;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	617b      	str	r3, [r7, #20]
	muestra_r *= 4;
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	613b      	str	r3, [r7, #16]
	//colocar un poco de continua para que no tome valores negativos
	muestra_l += 1024;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800109a:	617b      	str	r3, [r7, #20]
	muestra_r += 1024;
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010a2:	613b      	str	r3, [r7, #16]
	//DAC asincrono
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, muestra_l);
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	481e      	ldr	r0, [pc, #120]	; (8001124 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80010ac:	f001 f8ad 	bl	800220a <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, muestra_r);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2200      	movs	r2, #0
 80010b4:	2110      	movs	r1, #16
 80010b6:	481b      	ldr	r0, [pc, #108]	; (8001124 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80010b8:	f001 f8a7 	bl	800220a <HAL_DAC_SetValue>

	duty_cycle_1 = (100 * led_bajos) / 2048; // pondera la señal del 0 al 100
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_ADC_ConvCpltCallback+0x1e0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2264      	movs	r2, #100	; 0x64
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	da01      	bge.n	80010ce <HAL_ADC_ConvCpltCallback+0x19a>
 80010ca:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80010ce:	12db      	asrs	r3, r3, #11
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80010d4:	601a      	str	r2, [r3, #0]
    duty_cycle_2 = (100 * led_agudos) / 2048;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_ADC_ConvCpltCallback+0x1e4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2264      	movs	r2, #100	; 0x64
 80010dc:	fb02 f303 	mul.w	r3, r2, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	da01      	bge.n	80010e8 <HAL_ADC_ConvCpltCallback+0x1b4>
 80010e4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80010e8:	12db      	asrs	r3, r3, #11
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_ADC_ConvCpltCallback+0x1f8>)
 80010ee:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle_1);
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, duty_cycle_2);
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_ADC_ConvCpltCallback+0x1f8>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_ADC_ConvCpltCallback+0x200>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	639a      	str	r2, [r3, #56]	; 0x38
	//si se quiere visualizar la señal anlogica de los leds

	//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, led_bajos);
	//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, led_agudos);

}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001f4 	.word	0x200001f4
 8001110:	20000124 	.word	0x20000124
 8001114:	20000178 	.word	0x20000178
 8001118:	20000174 	.word	0x20000174
 800111c:	20000064 	.word	0x20000064
 8001120:	40020c00 	.word	0x40020c00
 8001124:	2000017c 	.word	0x2000017c
 8001128:	2000006c 	.word	0x2000006c
 800112c:	2000011c 	.word	0x2000011c
 8001130:	200000d4 	.word	0x200000d4
 8001134:	20000074 	.word	0x20000074

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_MspInit+0x4c>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <HAL_MspInit+0x4c>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_MspInit+0x4c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_MspInit+0x4c>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_MspInit+0x4c>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_MspInit+0x4c>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001182:	2007      	movs	r0, #7
 8001184:	f000 ff8c 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800

08001194 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a2e      	ldr	r2, [pc, #184]	; (800126c <HAL_ADC_MspInit+0xd8>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d155      	bne.n	8001262 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_ADC_MspInit+0xdc>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a2c      	ldr	r2, [pc, #176]	; (8001270 <HAL_ADC_MspInit+0xdc>)
 80011c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <HAL_ADC_MspInit+0xdc>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <HAL_ADC_MspInit+0xdc>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a25      	ldr	r2, [pc, #148]	; (8001270 <HAL_ADC_MspInit+0xdc>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_ADC_MspInit+0xdc>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80011ee:	230a      	movs	r3, #10
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f2:	2303      	movs	r3, #3
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	481c      	ldr	r0, [pc, #112]	; (8001274 <HAL_ADC_MspInit+0xe0>)
 8001202:	f001 fbe7 	bl	80029d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <HAL_ADC_MspInit+0xe4>)
 8001208:	4a1c      	ldr	r2, [pc, #112]	; (800127c <HAL_ADC_MspInit+0xe8>)
 800120a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <HAL_ADC_MspInit+0xe4>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_ADC_MspInit+0xe4>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_ADC_MspInit+0xe4>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_ADC_MspInit+0xe4>)
 8001220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001224:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_ADC_MspInit+0xe4>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_ADC_MspInit+0xe4>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_ADC_MspInit+0xe4>)
 8001234:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001238:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_ADC_MspInit+0xe4>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <HAL_ADC_MspInit+0xe4>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <HAL_ADC_MspInit+0xe4>)
 8001248:	f001 f854 	bl	80022f4 <HAL_DMA_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001252:	f7ff ff71 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_ADC_MspInit+0xe4>)
 800125a:	639a      	str	r2, [r3, #56]	; 0x38
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_ADC_MspInit+0xe4>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40012000 	.word	0x40012000
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000
 8001278:	20000190 	.word	0x20000190
 800127c:	40026410 	.word	0x40026410

08001280 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_DAC_MspInit+0x7c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d127      	bne.n	80012f2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_DAC_MspInit+0x80>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <HAL_DAC_MspInit+0x80>)
 80012ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_DAC_MspInit+0x80>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_DAC_MspInit+0x80>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <HAL_DAC_MspInit+0x80>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_DAC_MspInit+0x80>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012da:	2330      	movs	r3, #48	; 0x30
 80012dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012de:	2303      	movs	r3, #3
 80012e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_DAC_MspInit+0x84>)
 80012ee:	f001 fb71 	bl	80029d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40007400 	.word	0x40007400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a38      	ldr	r2, [pc, #224]	; (80013f8 <HAL_TIM_Base_MspInit+0xf0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d12e      	bne.n	8001378 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <HAL_TIM_Base_MspInit+0xf4>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a36      	ldr	r2, [pc, #216]	; (80013fc <HAL_TIM_Base_MspInit+0xf4>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <HAL_TIM_Base_MspInit+0xf4>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2018      	movs	r0, #24
 800133c:	f000 febb 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001340:	2018      	movs	r0, #24
 8001342:	f000 fed4 	bl	80020ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2019      	movs	r0, #25
 800134c:	f000 feb3 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001350:	2019      	movs	r0, #25
 8001352:	f000 fecc 	bl	80020ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	201a      	movs	r0, #26
 800135c:	f000 feab 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001360:	201a      	movs	r0, #26
 8001362:	f000 fec4 	bl	80020ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	201b      	movs	r0, #27
 800136c:	f000 fea3 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001370:	201b      	movs	r0, #27
 8001372:	f000 febc 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001376:	e03a      	b.n	80013ee <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001380:	d10e      	bne.n	80013a0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_TIM_Base_MspInit+0xf4>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <HAL_TIM_Base_MspInit+0xf4>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_TIM_Base_MspInit+0xf4>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
}
 800139e:	e026      	b.n	80013ee <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a16      	ldr	r2, [pc, #88]	; (8001400 <HAL_TIM_Base_MspInit+0xf8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10e      	bne.n	80013c8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_TIM_Base_MspInit+0xf4>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <HAL_TIM_Base_MspInit+0xf4>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_TIM_Base_MspInit+0xf4>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
}
 80013c6:	e012      	b.n	80013ee <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <HAL_TIM_Base_MspInit+0xfc>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d10d      	bne.n	80013ee <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_TIM_Base_MspInit+0xf4>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_TIM_Base_MspInit+0xf4>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_TIM_Base_MspInit+0xf4>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40010000 	.word	0x40010000
 80013fc:	40023800 	.word	0x40023800
 8001400:	40000400 	.word	0x40000400
 8001404:	40000800 	.word	0x40000800

08001408 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a24      	ldr	r2, [pc, #144]	; (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d11e      	bne.n	8001468 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <HAL_TIM_MspPostInit+0xb4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a22      	ldr	r2, [pc, #136]	; (80014bc <HAL_TIM_MspPostInit+0xb4>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <HAL_TIM_MspPostInit+0xb4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001446:	2340      	movs	r3, #64	; 0x40
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001456:	2302      	movs	r3, #2
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4817      	ldr	r0, [pc, #92]	; (80014c0 <HAL_TIM_MspPostInit+0xb8>)
 8001462:	f001 fab7 	bl	80029d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001466:	e022      	b.n	80014ae <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <HAL_TIM_MspPostInit+0xbc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d11d      	bne.n	80014ae <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_TIM_MspPostInit+0xb4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a10      	ldr	r2, [pc, #64]	; (80014bc <HAL_TIM_MspPostInit+0xb4>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_TIM_MspPostInit+0xb4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800149e:	2302      	movs	r3, #2
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <HAL_TIM_MspPostInit+0xc0>)
 80014aa:	f001 fa93 	bl	80029d4 <HAL_GPIO_Init>
}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40000400 	.word	0x40000400
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40000800 	.word	0x40000800
 80014c8:	40020400 	.word	0x40020400

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001518:	f000 f8ca 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001524:	2001      	movs	r0, #1
 8001526:	f001 fc23 	bl	8002d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001536:	f002 fa83 	bl	8003a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200001f8 	.word	0x200001f8

08001544 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800154a:	f002 fa79 	bl	8003a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200001f8 	.word	0x200001f8

08001558 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800155e:	f002 fa6f 	bl	8003a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200001f8 	.word	0x200001f8

0800156c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <TIM1_CC_IRQHandler+0x10>)
 8001572:	f002 fa65 	bl	8003a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200001f8 	.word	0x200001f8

08001580 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <DMA2_Stream0_IRQHandler+0x10>)
 8001586:	f000 ffbb 	bl	8002500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000190 	.word	0x20000190

08001594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f0 <LoopFillZerobss+0x12>
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <LoopFillZerobss+0x16>)
 80015be:	490e      	ldr	r1, [pc, #56]	; (80015f8 <LoopFillZerobss+0x1a>)
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <LoopFillZerobss+0x1e>)
 80015c2:	2300      	movs	r3, #0
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:
 80015c6:	58d4      	ldr	r4, [r2, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:
 80015cc:	18c4      	adds	r4, r0, r3
 80015ce:	428c      	cmp	r4, r1
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <LoopFillZerobss+0x22>)
 80015d4:	4c0b      	ldr	r4, [pc, #44]	; (8001604 <LoopFillZerobss+0x26>)
 80015d6:	2300      	movs	r3, #0
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:
 80015de:	42a2      	cmp	r2, r4
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>
 80015e2:	f7ff ffd7 	bl	8001594 <SystemInit>
 80015e6:	f003 f885 	bl	80046f4 <__libc_init_array>
 80015ea:	f7ff f923 	bl	8000834 <main>
 80015ee:	4770      	bx	lr
 80015f0:	20020000 	.word	0x20020000
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000048 	.word	0x20000048
 80015fc:	0800478c 	.word	0x0800478c
 8001600:	20000048 	.word	0x20000048
 8001604:	200002a4 	.word	0x200002a4

08001608 <ADC_IRQHandler>:
 8001608:	e7fe      	b.n	8001608 <ADC_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <HAL_Init+0x40>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <HAL_Init+0x40>)
 8001622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001626:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_Init+0x40>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 fd33 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	2000      	movs	r0, #0
 800163c:	f000 f808 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fd80 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023c00 	.word	0x40023c00

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x54>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x58>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fd4b 	bl	800210a <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f000 fd13 	bl	80020b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_InitTick+0x5c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	2000003c 	.word	0x2000003c
 80016a8:	20000044 	.word	0x20000044
 80016ac:	20000040 	.word	0x20000040

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000044 	.word	0x20000044
 80016d4:	200002a0 	.word	0x200002a0

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	200002a0 	.word	0x200002a0

080016f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e033      	b.n	800176e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fd40 	bl	8001194 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	2b00      	cmp	r3, #0
 800172c:	d118      	bne.n	8001760 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001736:	f023 0302 	bic.w	r3, r3, #2
 800173a:	f043 0202 	orr.w	r2, r3, #2
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fa5e 	bl	8001c04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f023 0303 	bic.w	r3, r3, #3
 8001756:	f043 0201 	orr.w	r2, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	641a      	str	r2, [r3, #64]	; 0x40
 800175e:	e001      	b.n	8001764 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Start_DMA+0x1e>
 8001792:	2302      	movs	r3, #2
 8001794:	e0e9      	b.n	800196a <HAL_ADC_Start_DMA+0x1f2>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d018      	beq.n	80017de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0201 	orr.w	r2, r2, #1
 80017ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017bc:	4b6d      	ldr	r3, [pc, #436]	; (8001974 <HAL_ADC_Start_DMA+0x1fc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a6d      	ldr	r2, [pc, #436]	; (8001978 <HAL_ADC_Start_DMA+0x200>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	0c9a      	lsrs	r2, r3, #18
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80017d0:	e002      	b.n	80017d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f9      	bne.n	80017d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ec:	d107      	bne.n	80017fe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b01      	cmp	r3, #1
 800180a:	f040 80a1 	bne.w	8001950 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001816:	f023 0301 	bic.w	r3, r3, #1
 800181a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182c:	2b00      	cmp	r3, #0
 800182e:	d007      	beq.n	8001840 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001838:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800184c:	d106      	bne.n	800185c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f023 0206 	bic.w	r2, r3, #6
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	645a      	str	r2, [r3, #68]	; 0x44
 800185a:	e002      	b.n	8001862 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800186a:	4b44      	ldr	r3, [pc, #272]	; (800197c <HAL_ADC_Start_DMA+0x204>)
 800186c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	4a43      	ldr	r2, [pc, #268]	; (8001980 <HAL_ADC_Start_DMA+0x208>)
 8001874:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187a:	4a42      	ldr	r2, [pc, #264]	; (8001984 <HAL_ADC_Start_DMA+0x20c>)
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001882:	4a41      	ldr	r2, [pc, #260]	; (8001988 <HAL_ADC_Start_DMA+0x210>)
 8001884:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800188e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800189e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	334c      	adds	r3, #76	; 0x4c
 80018ba:	4619      	mov	r1, r3
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f000 fdc6 	bl	8002450 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d12a      	bne.n	8001926 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a2d      	ldr	r2, [pc, #180]	; (800198c <HAL_ADC_Start_DMA+0x214>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d015      	beq.n	8001906 <HAL_ADC_Start_DMA+0x18e>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a2c      	ldr	r2, [pc, #176]	; (8001990 <HAL_ADC_Start_DMA+0x218>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d105      	bne.n	80018f0 <HAL_ADC_Start_DMA+0x178>
 80018e4:	4b25      	ldr	r3, [pc, #148]	; (800197c <HAL_ADC_Start_DMA+0x204>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00a      	beq.n	8001906 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a27      	ldr	r2, [pc, #156]	; (8001994 <HAL_ADC_Start_DMA+0x21c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d136      	bne.n	8001968 <HAL_ADC_Start_DMA+0x1f0>
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_ADC_Start_DMA+0x204>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b00      	cmp	r3, #0
 8001904:	d130      	bne.n	8001968 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d129      	bne.n	8001968 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	e020      	b.n	8001968 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a18      	ldr	r2, [pc, #96]	; (800198c <HAL_ADC_Start_DMA+0x214>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d11b      	bne.n	8001968 <HAL_ADC_Start_DMA+0x1f0>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d114      	bne.n	8001968 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	e00b      	b.n	8001968 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f043 0210 	orr.w	r2, r3, #16
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	f043 0201 	orr.w	r2, r3, #1
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000003c 	.word	0x2000003c
 8001978:	431bde83 	.word	0x431bde83
 800197c:	40012300 	.word	0x40012300
 8001980:	08001dfd 	.word	0x08001dfd
 8001984:	08001eb7 	.word	0x08001eb7
 8001988:	08001ed3 	.word	0x08001ed3
 800198c:	40012000 	.word	0x40012000
 8001990:	40012100 	.word	0x40012100
 8001994:	40012200 	.word	0x40012200

08001998 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x1c>
 80019d8:	2302      	movs	r3, #2
 80019da:	e105      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x228>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b09      	cmp	r3, #9
 80019ea:	d925      	bls.n	8001a38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68d9      	ldr	r1, [r3, #12]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	3b1e      	subs	r3, #30
 8001a02:	2207      	movs	r2, #7
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43da      	mvns	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	400a      	ands	r2, r1
 8001a10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68d9      	ldr	r1, [r3, #12]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	4603      	mov	r3, r0
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4403      	add	r3, r0
 8001a2a:	3b1e      	subs	r3, #30
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	e022      	b.n	8001a7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6919      	ldr	r1, [r3, #16]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	461a      	mov	r2, r3
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	400a      	ands	r2, r1
 8001a5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6919      	ldr	r1, [r3, #16]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	4603      	mov	r3, r0
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4403      	add	r3, r0
 8001a74:	409a      	lsls	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d824      	bhi.n	8001ad0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	3b05      	subs	r3, #5
 8001a98:	221f      	movs	r2, #31
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b05      	subs	r3, #5
 8001ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ace:	e04c      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d824      	bhi.n	8001b22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b23      	subs	r3, #35	; 0x23
 8001aea:	221f      	movs	r2, #31
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43da      	mvns	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	400a      	ands	r2, r1
 8001af8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3b23      	subs	r3, #35	; 0x23
 8001b14:	fa00 f203 	lsl.w	r2, r0, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b20:	e023      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	3b41      	subs	r3, #65	; 0x41
 8001b34:	221f      	movs	r2, #31
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	400a      	ands	r2, r1
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b41      	subs	r3, #65	; 0x41
 8001b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_ADC_ConfigChannel+0x234>)
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <HAL_ADC_ConfigChannel+0x238>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d109      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x1cc>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b12      	cmp	r3, #18
 8001b7e:	d105      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <HAL_ADC_ConfigChannel+0x238>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d123      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x21e>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d003      	beq.n	8001ba6 <HAL_ADC_ConfigChannel+0x1e6>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b11      	cmp	r3, #17
 8001ba4:	d11b      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d111      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_ADC_ConfigChannel+0x23c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <HAL_ADC_ConfigChannel+0x240>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	0c9a      	lsrs	r2, r3, #18
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bd0:	e002      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f9      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40012300 	.word	0x40012300
 8001bf8:	40012000 	.word	0x40012000
 8001bfc:	2000003c 	.word	0x2000003c
 8001c00:	431bde83 	.word	0x431bde83

08001c04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c0c:	4b79      	ldr	r3, [pc, #484]	; (8001df4 <ADC_Init+0x1f0>)
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	021a      	lsls	r2, r3, #8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6899      	ldr	r1, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <ADC_Init+0x1f4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d022      	beq.n	8001ce2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001caa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6899      	ldr	r1, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ccc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	e00f      	b.n	8001d02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0202 	bic.w	r2, r2, #2
 8001d10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6899      	ldr	r1, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	7e1b      	ldrb	r3, [r3, #24]
 8001d1c:	005a      	lsls	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01b      	beq.n	8001d68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6859      	ldr	r1, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	035a      	lsls	r2, r3, #13
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	e007      	b.n	8001d78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	051a      	lsls	r2, r3, #20
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6899      	ldr	r1, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dba:	025a      	lsls	r2, r3, #9
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6899      	ldr	r1, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	029a      	lsls	r2, r3, #10
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	609a      	str	r2, [r3, #8]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40012300 	.word	0x40012300
 8001df8:	0f000001 	.word	0x0f000001

08001dfc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e08:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d13c      	bne.n	8001e90 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d12b      	bne.n	8001e88 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d127      	bne.n	8001e88 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d119      	bne.n	8001e88 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0220 	bic.w	r2, r2, #32
 8001e62:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff f853 	bl	8000f34 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e8e:	e00e      	b.n	8001eae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f7ff fd85 	bl	80019ac <HAL_ADC_ErrorCallback>
}
 8001ea2:	e004      	b.n	8001eae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	4798      	blx	r3
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7ff fd67 	bl	8001998 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2240      	movs	r2, #64	; 0x40
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f043 0204 	orr.w	r2, r3, #4
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7ff fd5a 	bl	80019ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <__NVIC_GetPriorityGrouping+0x18>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	f003 0307 	and.w	r3, r3, #7
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db0b      	blt.n	8001f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4907      	ldr	r1, [pc, #28]	; (8001f9c <__NVIC_EnableIRQ+0x38>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f1c3 0307 	rsb	r3, r3, #7
 800200e:	2b04      	cmp	r3, #4
 8002010:	bf28      	it	cs
 8002012:	2304      	movcs	r3, #4
 8002014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3304      	adds	r3, #4
 800201a:	2b06      	cmp	r3, #6
 800201c:	d902      	bls.n	8002024 <NVIC_EncodePriority+0x30>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3b03      	subs	r3, #3
 8002022:	e000      	b.n	8002026 <NVIC_EncodePriority+0x32>
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	f04f 32ff 	mov.w	r2, #4294967295
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	401a      	ands	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800203c:	f04f 31ff 	mov.w	r1, #4294967295
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43d9      	mvns	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	4313      	orrs	r3, r2
         );
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800206c:	d301      	bcc.n	8002072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <SysTick_Config+0x40>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207a:	210f      	movs	r1, #15
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	f7ff ff8e 	bl	8001fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <SysTick_Config+0x40>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <SysTick_Config+0x40>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff29 	bl	8001f00 <__NVIC_SetPriorityGrouping>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff3e 	bl	8001f48 <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff8e 	bl	8001ff4 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5d 	bl	8001fa0 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff31 	bl	8001f64 <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa2 	bl	800205c <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e014      	b.n	800215e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	791b      	ldrb	r3, [r3, #4]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d105      	bne.n	800214a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff f89b 	bl	8001280 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2202      	movs	r2, #2
 800214e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	795b      	ldrb	r3, [r3, #5]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_DAC_Start+0x16>
 8002178:	2302      	movs	r3, #2
 800217a:	e040      	b.n	80021fe <HAL_DAC_Start+0x98>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2201      	movs	r2, #1
 8002196:	409a      	lsls	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10f      	bne.n	80021c6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80021b0:	2b3c      	cmp	r3, #60	; 0x3c
 80021b2:	d11d      	bne.n	80021f0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	e014      	b.n	80021f0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	213c      	movs	r1, #60	; 0x3c
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	429a      	cmp	r2, r3
 80021de:	d107      	bne.n	80021f0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0202 	orr.w	r2, r2, #2
 80021ee:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800220a:	b480      	push	{r7}
 800220c:	b087      	sub	sp, #28
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	3308      	adds	r3, #8
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e004      	b.n	800223e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	3314      	adds	r3, #20
 800223c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	461a      	mov	r2, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	795b      	ldrb	r3, [r3, #5]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_DAC_ConfigChannel+0x18>
 8002268:	2302      	movs	r3, #2
 800226a:	e03c      	b.n	80022e6 <HAL_DAC_ConfigChannel+0x92>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2202      	movs	r2, #2
 8002276:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	f640 72fe 	movw	r2, #4094	; 0xffe
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4013      	ands	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6819      	ldr	r1, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	22c0      	movs	r2, #192	; 0xc0
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	400a      	ands	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	371c      	adds	r7, #28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff f9ea 	bl	80016d8 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e099      	b.n	8002444 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002330:	e00f      	b.n	8002352 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002332:	f7ff f9d1 	bl	80016d8 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b05      	cmp	r3, #5
 800233e:	d908      	bls.n	8002352 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2203      	movs	r2, #3
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e078      	b.n	8002444 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e8      	bne.n	8002332 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4b38      	ldr	r3, [pc, #224]	; (800244c <HAL_DMA_Init+0x158>)
 800236c:	4013      	ands	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800237e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d107      	bne.n	80023bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	4313      	orrs	r3, r2
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f023 0307 	bic.w	r3, r3, #7
 80023d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d117      	bne.n	8002416 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00e      	beq.n	8002416 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fa6f 	bl	80028dc <DMA_CheckFifoParam>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2240      	movs	r2, #64	; 0x40
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002412:	2301      	movs	r3, #1
 8002414:	e016      	b.n	8002444 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fa26 	bl	8002870 <DMA_CalcBaseAndBitshift>
 8002424:	4603      	mov	r3, r0
 8002426:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	223f      	movs	r2, #63	; 0x3f
 800242e:	409a      	lsls	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	f010803f 	.word	0xf010803f

08002450 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_DMA_Start_IT+0x26>
 8002472:	2302      	movs	r3, #2
 8002474:	e040      	b.n	80024f8 <HAL_DMA_Start_IT+0xa8>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d12f      	bne.n	80024ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2202      	movs	r2, #2
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f9b8 	bl	8002814 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	223f      	movs	r2, #63	; 0x3f
 80024aa:	409a      	lsls	r2, r3
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0216 	orr.w	r2, r2, #22
 80024be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0208 	orr.w	r2, r2, #8
 80024d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e005      	b.n	80024f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
 80024f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800250c:	4b92      	ldr	r3, [pc, #584]	; (8002758 <HAL_DMA_IRQHandler+0x258>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a92      	ldr	r2, [pc, #584]	; (800275c <HAL_DMA_IRQHandler+0x25c>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0a9b      	lsrs	r3, r3, #10
 8002518:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	2208      	movs	r2, #8
 800252c:	409a      	lsls	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d01a      	beq.n	800256c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d013      	beq.n	800256c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0204 	bic.w	r2, r2, #4
 8002552:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002558:	2208      	movs	r2, #8
 800255a:	409a      	lsls	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	2201      	movs	r2, #1
 8002572:	409a      	lsls	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d012      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	2201      	movs	r2, #1
 8002590:	409a      	lsls	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f043 0202 	orr.w	r2, r3, #2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	2204      	movs	r2, #4
 80025a8:	409a      	lsls	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d012      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00b      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c4:	2204      	movs	r2, #4
 80025c6:	409a      	lsls	r2, r3
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	f043 0204 	orr.w	r2, r3, #4
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	2210      	movs	r2, #16
 80025de:	409a      	lsls	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d043      	beq.n	8002670 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d03c      	beq.n	8002670 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	2210      	movs	r2, #16
 80025fc:	409a      	lsls	r2, r3
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d018      	beq.n	8002642 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d108      	bne.n	8002630 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d024      	beq.n	8002670 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
 800262e:	e01f      	b.n	8002670 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01b      	beq.n	8002670 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4798      	blx	r3
 8002640:	e016      	b.n	8002670 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d107      	bne.n	8002660 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0208 	bic.w	r2, r2, #8
 800265e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	2220      	movs	r2, #32
 8002676:	409a      	lsls	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 808e 	beq.w	800279e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8086 	beq.w	800279e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	2220      	movs	r2, #32
 8002698:	409a      	lsls	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d136      	bne.n	8002718 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0216 	bic.w	r2, r2, #22
 80026b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d103      	bne.n	80026da <HAL_DMA_IRQHandler+0x1da>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0208 	bic.w	r2, r2, #8
 80026e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	223f      	movs	r2, #63	; 0x3f
 80026f0:	409a      	lsls	r2, r3
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270a:	2b00      	cmp	r3, #0
 800270c:	d07d      	beq.n	800280a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
        }
        return;
 8002716:	e078      	b.n	800280a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01c      	beq.n	8002760 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d108      	bne.n	8002746 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	2b00      	cmp	r3, #0
 800273a:	d030      	beq.n	800279e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
 8002744:	e02b      	b.n	800279e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	2b00      	cmp	r3, #0
 800274c:	d027      	beq.n	800279e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	4798      	blx	r3
 8002756:	e022      	b.n	800279e <HAL_DMA_IRQHandler+0x29e>
 8002758:	2000003c 	.word	0x2000003c
 800275c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10f      	bne.n	800278e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0210 	bic.w	r2, r2, #16
 800277c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d032      	beq.n	800280c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d022      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2205      	movs	r2, #5
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3301      	adds	r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d307      	bcc.n	80027e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f2      	bne.n	80027ca <HAL_DMA_IRQHandler+0x2ca>
 80027e4:	e000      	b.n	80027e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80027e6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	4798      	blx	r3
 8002808:	e000      	b.n	800280c <HAL_DMA_IRQHandler+0x30c>
        return;
 800280a:	bf00      	nop
    }
  }
}
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop

08002814 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002830:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d108      	bne.n	8002854 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002852:	e007      	b.n	8002864 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	60da      	str	r2, [r3, #12]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	3b10      	subs	r3, #16
 8002880:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <DMA_CalcBaseAndBitshift+0x64>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800288a:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <DMA_CalcBaseAndBitshift+0x68>)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d909      	bls.n	80028b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028a6:	f023 0303 	bic.w	r3, r3, #3
 80028aa:	1d1a      	adds	r2, r3, #4
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	659a      	str	r2, [r3, #88]	; 0x58
 80028b0:	e007      	b.n	80028c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028ba:	f023 0303 	bic.w	r3, r3, #3
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	aaaaaaab 	.word	0xaaaaaaab
 80028d8:	08004774 	.word	0x08004774

080028dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d11f      	bne.n	8002936 <DMA_CheckFifoParam+0x5a>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d856      	bhi.n	80029aa <DMA_CheckFifoParam+0xce>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <DMA_CheckFifoParam+0x28>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002915 	.word	0x08002915
 8002908:	08002927 	.word	0x08002927
 800290c:	08002915 	.word	0x08002915
 8002910:	080029ab 	.word	0x080029ab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d046      	beq.n	80029ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002924:	e043      	b.n	80029ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800292e:	d140      	bne.n	80029b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002934:	e03d      	b.n	80029b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800293e:	d121      	bne.n	8002984 <DMA_CheckFifoParam+0xa8>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d837      	bhi.n	80029b6 <DMA_CheckFifoParam+0xda>
 8002946:	a201      	add	r2, pc, #4	; (adr r2, 800294c <DMA_CheckFifoParam+0x70>)
 8002948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294c:	0800295d 	.word	0x0800295d
 8002950:	08002963 	.word	0x08002963
 8002954:	0800295d 	.word	0x0800295d
 8002958:	08002975 	.word	0x08002975
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
      break;
 8002960:	e030      	b.n	80029c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d025      	beq.n	80029ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002972:	e022      	b.n	80029ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800297c:	d11f      	bne.n	80029be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002982:	e01c      	b.n	80029be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d903      	bls.n	8002992 <DMA_CheckFifoParam+0xb6>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d003      	beq.n	8002998 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002990:	e018      	b.n	80029c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
      break;
 8002996:	e015      	b.n	80029c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00e      	beq.n	80029c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      break;
 80029a8:	e00b      	b.n	80029c2 <DMA_CheckFifoParam+0xe6>
      break;
 80029aa:	bf00      	nop
 80029ac:	e00a      	b.n	80029c4 <DMA_CheckFifoParam+0xe8>
      break;
 80029ae:	bf00      	nop
 80029b0:	e008      	b.n	80029c4 <DMA_CheckFifoParam+0xe8>
      break;
 80029b2:	bf00      	nop
 80029b4:	e006      	b.n	80029c4 <DMA_CheckFifoParam+0xe8>
      break;
 80029b6:	bf00      	nop
 80029b8:	e004      	b.n	80029c4 <DMA_CheckFifoParam+0xe8>
      break;
 80029ba:	bf00      	nop
 80029bc:	e002      	b.n	80029c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80029be:	bf00      	nop
 80029c0:	e000      	b.n	80029c4 <DMA_CheckFifoParam+0xe8>
      break;
 80029c2:	bf00      	nop
    }
  } 
  
  return status; 
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop

080029d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	; 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	e16b      	b.n	8002cc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	f040 815a 	bne.w	8002cc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d005      	beq.n	8002a26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d130      	bne.n	8002a88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	2203      	movs	r2, #3
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 0201 	and.w	r2, r3, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d017      	beq.n	8002ac4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d123      	bne.n	8002b18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	08da      	lsrs	r2, r3, #3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3208      	adds	r2, #8
 8002ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	220f      	movs	r2, #15
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	08da      	lsrs	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3208      	adds	r2, #8
 8002b12:	69b9      	ldr	r1, [r7, #24]
 8002b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0203 	and.w	r2, r3, #3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80b4 	beq.w	8002cc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	4b60      	ldr	r3, [pc, #384]	; (8002ce0 <HAL_GPIO_Init+0x30c>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	4a5f      	ldr	r2, [pc, #380]	; (8002ce0 <HAL_GPIO_Init+0x30c>)
 8002b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b68:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6a:	4b5d      	ldr	r3, [pc, #372]	; (8002ce0 <HAL_GPIO_Init+0x30c>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b76:	4a5b      	ldr	r2, [pc, #364]	; (8002ce4 <HAL_GPIO_Init+0x310>)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a52      	ldr	r2, [pc, #328]	; (8002ce8 <HAL_GPIO_Init+0x314>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02b      	beq.n	8002bfa <HAL_GPIO_Init+0x226>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a51      	ldr	r2, [pc, #324]	; (8002cec <HAL_GPIO_Init+0x318>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d025      	beq.n	8002bf6 <HAL_GPIO_Init+0x222>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a50      	ldr	r2, [pc, #320]	; (8002cf0 <HAL_GPIO_Init+0x31c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d01f      	beq.n	8002bf2 <HAL_GPIO_Init+0x21e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4f      	ldr	r2, [pc, #316]	; (8002cf4 <HAL_GPIO_Init+0x320>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d019      	beq.n	8002bee <HAL_GPIO_Init+0x21a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4e      	ldr	r2, [pc, #312]	; (8002cf8 <HAL_GPIO_Init+0x324>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_GPIO_Init+0x216>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4d      	ldr	r2, [pc, #308]	; (8002cfc <HAL_GPIO_Init+0x328>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00d      	beq.n	8002be6 <HAL_GPIO_Init+0x212>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4c      	ldr	r2, [pc, #304]	; (8002d00 <HAL_GPIO_Init+0x32c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d007      	beq.n	8002be2 <HAL_GPIO_Init+0x20e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4b      	ldr	r2, [pc, #300]	; (8002d04 <HAL_GPIO_Init+0x330>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_GPIO_Init+0x20a>
 8002bda:	2307      	movs	r3, #7
 8002bdc:	e00e      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002bde:	2308      	movs	r3, #8
 8002be0:	e00c      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002be2:	2306      	movs	r3, #6
 8002be4:	e00a      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002be6:	2305      	movs	r3, #5
 8002be8:	e008      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002bea:	2304      	movs	r3, #4
 8002bec:	e006      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e004      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e002      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	f002 0203 	and.w	r2, r2, #3
 8002c02:	0092      	lsls	r2, r2, #2
 8002c04:	4093      	lsls	r3, r2
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c0c:	4935      	ldr	r1, [pc, #212]	; (8002ce4 <HAL_GPIO_Init+0x310>)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	3302      	adds	r3, #2
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_GPIO_Init+0x334>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c3e:	4a32      	ldr	r2, [pc, #200]	; (8002d08 <HAL_GPIO_Init+0x334>)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c44:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <HAL_GPIO_Init+0x334>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c68:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <HAL_GPIO_Init+0x334>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c6e:	4b26      	ldr	r3, [pc, #152]	; (8002d08 <HAL_GPIO_Init+0x334>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c92:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <HAL_GPIO_Init+0x334>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_GPIO_Init+0x334>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cbc:	4a12      	ldr	r2, [pc, #72]	; (8002d08 <HAL_GPIO_Init+0x334>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	61fb      	str	r3, [r7, #28]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	2b0f      	cmp	r3, #15
 8002ccc:	f67f ae90 	bls.w	80029f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	3724      	adds	r7, #36	; 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40013800 	.word	0x40013800
 8002ce8:	40020000 	.word	0x40020000
 8002cec:	40020400 	.word	0x40020400
 8002cf0:	40020800 	.word	0x40020800
 8002cf4:	40020c00 	.word	0x40020c00
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40021400 	.word	0x40021400
 8002d00:	40021800 	.word	0x40021800
 8002d04:	40021c00 	.word	0x40021c00
 8002d08:	40013c00 	.word	0x40013c00

08002d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	e001      	b.n	8002d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d4c:	787b      	ldrb	r3, [r7, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d58:	e003      	b.n	8002d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d5a:	887b      	ldrh	r3, [r7, #2]
 8002d5c:	041a      	lsls	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	619a      	str	r2, [r3, #24]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d006      	beq.n	8002d94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d86:	4a05      	ldr	r2, [pc, #20]	; (8002d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fb96 	bl	80004c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40013c00 	.word	0x40013c00

08002da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e264      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d075      	beq.n	8002eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dbe:	4ba3      	ldr	r3, [pc, #652]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d00c      	beq.n	8002de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dca:	4ba0      	ldr	r3, [pc, #640]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d112      	bne.n	8002dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dd6:	4b9d      	ldr	r3, [pc, #628]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002de2:	d10b      	bne.n	8002dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	4b99      	ldr	r3, [pc, #612]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d05b      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x108>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d157      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e23f      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e04:	d106      	bne.n	8002e14 <HAL_RCC_OscConfig+0x74>
 8002e06:	4b91      	ldr	r3, [pc, #580]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a90      	ldr	r2, [pc, #576]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e01d      	b.n	8002e50 <HAL_RCC_OscConfig+0xb0>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x98>
 8002e1e:	4b8b      	ldr	r3, [pc, #556]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a8a      	ldr	r2, [pc, #552]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b88      	ldr	r3, [pc, #544]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a87      	ldr	r2, [pc, #540]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e00b      	b.n	8002e50 <HAL_RCC_OscConfig+0xb0>
 8002e38:	4b84      	ldr	r3, [pc, #528]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a83      	ldr	r2, [pc, #524]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b81      	ldr	r3, [pc, #516]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a80      	ldr	r2, [pc, #512]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe fc3e 	bl	80016d8 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe fc3a 	bl	80016d8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e204      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b76      	ldr	r3, [pc, #472]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0xc0>
 8002e7e:	e014      	b.n	8002eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fc2a 	bl	80016d8 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fe fc26 	bl	80016d8 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1f0      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9a:	4b6c      	ldr	r3, [pc, #432]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0xe8>
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d063      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eb6:	4b65      	ldr	r3, [pc, #404]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec2:	4b62      	ldr	r3, [pc, #392]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d11c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ece:	4b5f      	ldr	r3, [pc, #380]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d116      	bne.n	8002f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	4b5c      	ldr	r3, [pc, #368]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x152>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e1c4      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b56      	ldr	r3, [pc, #344]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4952      	ldr	r1, [pc, #328]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	e03a      	b.n	8002f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d020      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f10:	4b4f      	ldr	r3, [pc, #316]	; (8003050 <HAL_RCC_OscConfig+0x2b0>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f16:	f7fe fbdf 	bl	80016d8 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1e:	f7fe fbdb 	bl	80016d8 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e1a5      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f30:	4b46      	ldr	r3, [pc, #280]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3c:	4b43      	ldr	r3, [pc, #268]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4940      	ldr	r1, [pc, #256]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
 8002f50:	e015      	b.n	8002f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f52:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <HAL_RCC_OscConfig+0x2b0>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe fbbe 	bl	80016d8 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f60:	f7fe fbba 	bl	80016d8 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e184      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f72:	4b36      	ldr	r3, [pc, #216]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d030      	beq.n	8002fec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d016      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f92:	4b30      	ldr	r3, [pc, #192]	; (8003054 <HAL_RCC_OscConfig+0x2b4>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe fb9e 	bl	80016d8 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa0:	f7fe fb9a 	bl	80016d8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e164      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb2:	4b26      	ldr	r3, [pc, #152]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x200>
 8002fbe:	e015      	b.n	8002fec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc0:	4b24      	ldr	r3, [pc, #144]	; (8003054 <HAL_RCC_OscConfig+0x2b4>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe fb87 	bl	80016d8 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fce:	f7fe fb83 	bl	80016d8 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e14d      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8002fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80a0 	beq.w	800313a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10f      	bne.n	800302a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	4b0f      	ldr	r3, [pc, #60]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a0e      	ldr	r2, [pc, #56]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_RCC_OscConfig+0x2ac>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003026:	2301      	movs	r3, #1
 8003028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_OscConfig+0x2b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d121      	bne.n	800307a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_RCC_OscConfig+0x2b8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a07      	ldr	r2, [pc, #28]	; (8003058 <HAL_RCC_OscConfig+0x2b8>)
 800303c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003042:	f7fe fb49 	bl	80016d8 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	e011      	b.n	800306e <HAL_RCC_OscConfig+0x2ce>
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800
 8003050:	42470000 	.word	0x42470000
 8003054:	42470e80 	.word	0x42470e80
 8003058:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305c:	f7fe fb3c 	bl	80016d8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e106      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306e:	4b85      	ldr	r3, [pc, #532]	; (8003284 <HAL_RCC_OscConfig+0x4e4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d106      	bne.n	8003090 <HAL_RCC_OscConfig+0x2f0>
 8003082:	4b81      	ldr	r3, [pc, #516]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	4a80      	ldr	r2, [pc, #512]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6713      	str	r3, [r2, #112]	; 0x70
 800308e:	e01c      	b.n	80030ca <HAL_RCC_OscConfig+0x32a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b05      	cmp	r3, #5
 8003096:	d10c      	bne.n	80030b2 <HAL_RCC_OscConfig+0x312>
 8003098:	4b7b      	ldr	r3, [pc, #492]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	4a7a      	ldr	r2, [pc, #488]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	6713      	str	r3, [r2, #112]	; 0x70
 80030a4:	4b78      	ldr	r3, [pc, #480]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	4a77      	ldr	r2, [pc, #476]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6713      	str	r3, [r2, #112]	; 0x70
 80030b0:	e00b      	b.n	80030ca <HAL_RCC_OscConfig+0x32a>
 80030b2:	4b75      	ldr	r3, [pc, #468]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	4a74      	ldr	r2, [pc, #464]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 80030b8:	f023 0301 	bic.w	r3, r3, #1
 80030bc:	6713      	str	r3, [r2, #112]	; 0x70
 80030be:	4b72      	ldr	r3, [pc, #456]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c2:	4a71      	ldr	r2, [pc, #452]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 80030c4:	f023 0304 	bic.w	r3, r3, #4
 80030c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d015      	beq.n	80030fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7fe fb01 	bl	80016d8 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fe fafd 	bl	80016d8 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0c5      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f0:	4b65      	ldr	r3, [pc, #404]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0ee      	beq.n	80030da <HAL_RCC_OscConfig+0x33a>
 80030fc:	e014      	b.n	8003128 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fe:	f7fe faeb 	bl	80016d8 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fe fae7 	bl	80016d8 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e0af      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311c:	4b5a      	ldr	r3, [pc, #360]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ee      	bne.n	8003106 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d105      	bne.n	800313a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312e:	4b56      	ldr	r3, [pc, #344]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	4a55      	ldr	r2, [pc, #340]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 8003134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003138:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 809b 	beq.w	800327a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003144:	4b50      	ldr	r3, [pc, #320]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 030c 	and.w	r3, r3, #12
 800314c:	2b08      	cmp	r3, #8
 800314e:	d05c      	beq.n	800320a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d141      	bne.n	80031dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003158:	4b4c      	ldr	r3, [pc, #304]	; (800328c <HAL_RCC_OscConfig+0x4ec>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7fe fabb 	bl	80016d8 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003166:	f7fe fab7 	bl	80016d8 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e081      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003178:	4b43      	ldr	r3, [pc, #268]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f0      	bne.n	8003166 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	019b      	lsls	r3, r3, #6
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	085b      	lsrs	r3, r3, #1
 800319c:	3b01      	subs	r3, #1
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	061b      	lsls	r3, r3, #24
 80031a8:	4937      	ldr	r1, [pc, #220]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ae:	4b37      	ldr	r3, [pc, #220]	; (800328c <HAL_RCC_OscConfig+0x4ec>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fa90 	bl	80016d8 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fe fa8c 	bl	80016d8 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e056      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ce:	4b2e      	ldr	r3, [pc, #184]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x41c>
 80031da:	e04e      	b.n	800327a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031dc:	4b2b      	ldr	r3, [pc, #172]	; (800328c <HAL_RCC_OscConfig+0x4ec>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e2:	f7fe fa79 	bl	80016d8 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ea:	f7fe fa75 	bl	80016d8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e03f      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fc:	4b22      	ldr	r3, [pc, #136]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f0      	bne.n	80031ea <HAL_RCC_OscConfig+0x44a>
 8003208:	e037      	b.n	800327a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e032      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003216:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <HAL_RCC_OscConfig+0x4e8>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d028      	beq.n	8003276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d121      	bne.n	8003276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d11a      	bne.n	8003276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003246:	4013      	ands	r3, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800324c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800324e:	4293      	cmp	r3, r2
 8003250:	d111      	bne.n	8003276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	3b01      	subs	r3, #1
 8003260:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d107      	bne.n	8003276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d001      	beq.n	800327a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40007000 	.word	0x40007000
 8003288:	40023800 	.word	0x40023800
 800328c:	42470060 	.word	0x42470060

08003290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0cc      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032a4:	4b68      	ldr	r3, [pc, #416]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d90c      	bls.n	80032cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b65      	ldr	r3, [pc, #404]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ba:	4b63      	ldr	r3, [pc, #396]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0b8      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d020      	beq.n	800331a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e4:	4b59      	ldr	r3, [pc, #356]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a58      	ldr	r2, [pc, #352]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032fc:	4b53      	ldr	r3, [pc, #332]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4a52      	ldr	r2, [pc, #328]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	4b50      	ldr	r3, [pc, #320]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	494d      	ldr	r1, [pc, #308]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d044      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d119      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e07f      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d003      	beq.n	800334e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334a:	2b03      	cmp	r3, #3
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334e:	4b3f      	ldr	r3, [pc, #252]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e06f      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335e:	4b3b      	ldr	r3, [pc, #236]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e067      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336e:	4b37      	ldr	r3, [pc, #220]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f023 0203 	bic.w	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4934      	ldr	r1, [pc, #208]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003380:	f7fe f9aa 	bl	80016d8 <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	e00a      	b.n	800339e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003388:	f7fe f9a6 	bl	80016d8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	; 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e04f      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 020c 	and.w	r2, r3, #12
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d1eb      	bne.n	8003388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d20c      	bcs.n	80033d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b22      	ldr	r3, [pc, #136]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e032      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4916      	ldr	r1, [pc, #88]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	490e      	ldr	r1, [pc, #56]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003416:	f000 f821 	bl	800345c <HAL_RCC_GetSysClockFreq>
 800341a:	4602      	mov	r2, r0
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	490a      	ldr	r1, [pc, #40]	; (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	5ccb      	ldrb	r3, [r1, r3]
 800342a:	fa22 f303 	lsr.w	r3, r2, r3
 800342e:	4a09      	ldr	r2, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe f90a 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40023c00 	.word	0x40023c00
 800344c:	40023800 	.word	0x40023800
 8003450:	08004764 	.word	0x08004764
 8003454:	2000003c 	.word	0x2000003c
 8003458:	20000040 	.word	0x20000040

0800345c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800345c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	2300      	movs	r3, #0
 800346e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003474:	4b67      	ldr	r3, [pc, #412]	; (8003614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b08      	cmp	r3, #8
 800347e:	d00d      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x40>
 8003480:	2b08      	cmp	r3, #8
 8003482:	f200 80bd 	bhi.w	8003600 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x34>
 800348a:	2b04      	cmp	r3, #4
 800348c:	d003      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x3a>
 800348e:	e0b7      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4b61      	ldr	r3, [pc, #388]	; (8003618 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003492:	60bb      	str	r3, [r7, #8]
       break;
 8003494:	e0b7      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003496:	4b61      	ldr	r3, [pc, #388]	; (800361c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003498:	60bb      	str	r3, [r7, #8]
      break;
 800349a:	e0b4      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800349c:	4b5d      	ldr	r3, [pc, #372]	; (8003614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034a6:	4b5b      	ldr	r3, [pc, #364]	; (8003614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d04d      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b2:	4b58      	ldr	r3, [pc, #352]	; (8003614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	461a      	mov	r2, r3
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034c2:	f04f 0100 	mov.w	r1, #0
 80034c6:	ea02 0800 	and.w	r8, r2, r0
 80034ca:	ea03 0901 	and.w	r9, r3, r1
 80034ce:	4640      	mov	r0, r8
 80034d0:	4649      	mov	r1, r9
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	014b      	lsls	r3, r1, #5
 80034dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034e0:	0142      	lsls	r2, r0, #5
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	ebb0 0008 	subs.w	r0, r0, r8
 80034ea:	eb61 0109 	sbc.w	r1, r1, r9
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	018b      	lsls	r3, r1, #6
 80034f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034fc:	0182      	lsls	r2, r0, #6
 80034fe:	1a12      	subs	r2, r2, r0
 8003500:	eb63 0301 	sbc.w	r3, r3, r1
 8003504:	f04f 0000 	mov.w	r0, #0
 8003508:	f04f 0100 	mov.w	r1, #0
 800350c:	00d9      	lsls	r1, r3, #3
 800350e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003512:	00d0      	lsls	r0, r2, #3
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	eb12 0208 	adds.w	r2, r2, r8
 800351c:	eb43 0309 	adc.w	r3, r3, r9
 8003520:	f04f 0000 	mov.w	r0, #0
 8003524:	f04f 0100 	mov.w	r1, #0
 8003528:	0259      	lsls	r1, r3, #9
 800352a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800352e:	0250      	lsls	r0, r2, #9
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4610      	mov	r0, r2
 8003536:	4619      	mov	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	461a      	mov	r2, r3
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	f7fc fe42 	bl	80001c8 <__aeabi_uldivmod>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4613      	mov	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e04a      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354e:	4b31      	ldr	r3, [pc, #196]	; (8003614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	099b      	lsrs	r3, r3, #6
 8003554:	461a      	mov	r2, r3
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	ea02 0400 	and.w	r4, r2, r0
 8003566:	ea03 0501 	and.w	r5, r3, r1
 800356a:	4620      	mov	r0, r4
 800356c:	4629      	mov	r1, r5
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	014b      	lsls	r3, r1, #5
 8003578:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800357c:	0142      	lsls	r2, r0, #5
 800357e:	4610      	mov	r0, r2
 8003580:	4619      	mov	r1, r3
 8003582:	1b00      	subs	r0, r0, r4
 8003584:	eb61 0105 	sbc.w	r1, r1, r5
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	018b      	lsls	r3, r1, #6
 8003592:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003596:	0182      	lsls	r2, r0, #6
 8003598:	1a12      	subs	r2, r2, r0
 800359a:	eb63 0301 	sbc.w	r3, r3, r1
 800359e:	f04f 0000 	mov.w	r0, #0
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	00d9      	lsls	r1, r3, #3
 80035a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035ac:	00d0      	lsls	r0, r2, #3
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	1912      	adds	r2, r2, r4
 80035b4:	eb45 0303 	adc.w	r3, r5, r3
 80035b8:	f04f 0000 	mov.w	r0, #0
 80035bc:	f04f 0100 	mov.w	r1, #0
 80035c0:	0299      	lsls	r1, r3, #10
 80035c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035c6:	0290      	lsls	r0, r2, #10
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4610      	mov	r0, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	f7fc fdf6 	bl	80001c8 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4613      	mov	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	3301      	adds	r3, #1
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	60bb      	str	r3, [r7, #8]
      break;
 80035fe:	e002      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003602:	60bb      	str	r3, [r7, #8]
      break;
 8003604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003606:	68bb      	ldr	r3, [r7, #8]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800
 8003618:	00f42400 	.word	0x00f42400
 800361c:	007a1200 	.word	0x007a1200

08003620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e041      	b.n	80036b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fd fe5e 	bl	8001308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	f000 fca8 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d001      	beq.n	80036d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e04e      	b.n	8003776 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a23      	ldr	r2, [pc, #140]	; (8003784 <HAL_TIM_Base_Start_IT+0xc4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d022      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003702:	d01d      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <HAL_TIM_Base_Start_IT+0xc8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d018      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1e      	ldr	r2, [pc, #120]	; (800378c <HAL_TIM_Base_Start_IT+0xcc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <HAL_TIM_Base_Start_IT+0xd0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00e      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_TIM_Base_Start_IT+0xd4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a19      	ldr	r2, [pc, #100]	; (8003798 <HAL_TIM_Base_Start_IT+0xd8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x80>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a18      	ldr	r2, [pc, #96]	; (800379c <HAL_TIM_Base_Start_IT+0xdc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d111      	bne.n	8003764 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b06      	cmp	r3, #6
 8003750:	d010      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003762:	e007      	b.n	8003774 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40010000 	.word	0x40010000
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800
 8003790:	40000c00 	.word	0x40000c00
 8003794:	40010400 	.word	0x40010400
 8003798:	40014000 	.word	0x40014000
 800379c:	40001800 	.word	0x40001800

080037a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	f241 1311 	movw	r3, #4369	; 0x1111
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10f      	bne.n	80037e8 <HAL_TIM_Base_Stop_IT+0x48>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	f240 4344 	movw	r3, #1092	; 0x444
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d107      	bne.n	80037e8 <HAL_TIM_Base_Stop_IT+0x48>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e041      	b.n	8003894 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d106      	bne.n	800382a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f839 	bl	800389c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3304      	adds	r3, #4
 800383a:	4619      	mov	r1, r3
 800383c:	4610      	mov	r0, r2
 800383e:	f000 fbb9 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d109      	bne.n	80038d4 <HAL_TIM_PWM_Start+0x24>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	bf14      	ite	ne
 80038cc:	2301      	movne	r3, #1
 80038ce:	2300      	moveq	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	e022      	b.n	800391a <HAL_TIM_PWM_Start+0x6a>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d109      	bne.n	80038ee <HAL_TIM_PWM_Start+0x3e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	bf14      	ite	ne
 80038e6:	2301      	movne	r3, #1
 80038e8:	2300      	moveq	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	e015      	b.n	800391a <HAL_TIM_PWM_Start+0x6a>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d109      	bne.n	8003908 <HAL_TIM_PWM_Start+0x58>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	bf14      	ite	ne
 8003900:	2301      	movne	r3, #1
 8003902:	2300      	moveq	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	e008      	b.n	800391a <HAL_TIM_PWM_Start+0x6a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e07c      	b.n	8003a1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <HAL_TIM_PWM_Start+0x82>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003930:	e013      	b.n	800395a <HAL_TIM_PWM_Start+0xaa>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b04      	cmp	r3, #4
 8003936:	d104      	bne.n	8003942 <HAL_TIM_PWM_Start+0x92>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003940:	e00b      	b.n	800395a <HAL_TIM_PWM_Start+0xaa>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d104      	bne.n	8003952 <HAL_TIM_PWM_Start+0xa2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003950:	e003      	b.n	800395a <HAL_TIM_PWM_Start+0xaa>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2201      	movs	r2, #1
 8003960:	6839      	ldr	r1, [r7, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fe10 	bl	8004588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a2d      	ldr	r2, [pc, #180]	; (8003a24 <HAL_TIM_PWM_Start+0x174>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <HAL_TIM_PWM_Start+0xcc>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2c      	ldr	r2, [pc, #176]	; (8003a28 <HAL_TIM_PWM_Start+0x178>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d101      	bne.n	8003980 <HAL_TIM_PWM_Start+0xd0>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_TIM_PWM_Start+0xd2>
 8003980:	2300      	movs	r3, #0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a22      	ldr	r2, [pc, #136]	; (8003a24 <HAL_TIM_PWM_Start+0x174>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d022      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x136>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a8:	d01d      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x136>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1f      	ldr	r2, [pc, #124]	; (8003a2c <HAL_TIM_PWM_Start+0x17c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d018      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x136>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <HAL_TIM_PWM_Start+0x180>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x136>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1c      	ldr	r2, [pc, #112]	; (8003a34 <HAL_TIM_PWM_Start+0x184>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x136>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a16      	ldr	r2, [pc, #88]	; (8003a28 <HAL_TIM_PWM_Start+0x178>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x136>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <HAL_TIM_PWM_Start+0x188>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x136>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <HAL_TIM_PWM_Start+0x18c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d111      	bne.n	8003a0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b06      	cmp	r3, #6
 80039f6:	d010      	beq.n	8003a1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a08:	e007      	b.n	8003a1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0201 	orr.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40010400 	.word	0x40010400
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800
 8003a34:	40000c00 	.word	0x40000c00
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40001800 	.word	0x40001800

08003a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d122      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d11b      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0202 	mvn.w	r2, #2
 8003a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fa77 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003a88:	e005      	b.n	8003a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa69 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fa7a 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d122      	bne.n	8003af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d11b      	bne.n	8003af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0204 	mvn.w	r2, #4
 8003ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fa4d 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fa3f 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fa50 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d122      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d11b      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0208 	mvn.w	r2, #8
 8003b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2204      	movs	r2, #4
 8003b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fa23 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fa15 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fa26 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d122      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0210 	mvn.w	r2, #16
 8003b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f9f9 	bl	8003f76 <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f9eb 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f9fc 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d107      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0201 	mvn.w	r2, #1
 8003bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd f988 	bl	8000ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bce:	2b80      	cmp	r3, #128	; 0x80
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bdc:	2b80      	cmp	r3, #128	; 0x80
 8003bde:	d107      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fd78 	bl	80046e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	d10e      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	d107      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f9c1 	bl	8003f9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d10e      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d107      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0220 	mvn.w	r2, #32
 8003c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fd42 	bl	80046cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e0ae      	b.n	8003dcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b0c      	cmp	r3, #12
 8003c7a:	f200 809f 	bhi.w	8003dbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003cb9 	.word	0x08003cb9
 8003c88:	08003dbd 	.word	0x08003dbd
 8003c8c:	08003dbd 	.word	0x08003dbd
 8003c90:	08003dbd 	.word	0x08003dbd
 8003c94:	08003cf9 	.word	0x08003cf9
 8003c98:	08003dbd 	.word	0x08003dbd
 8003c9c:	08003dbd 	.word	0x08003dbd
 8003ca0:	08003dbd 	.word	0x08003dbd
 8003ca4:	08003d3b 	.word	0x08003d3b
 8003ca8:	08003dbd 	.word	0x08003dbd
 8003cac:	08003dbd 	.word	0x08003dbd
 8003cb0:	08003dbd 	.word	0x08003dbd
 8003cb4:	08003d7b 	.word	0x08003d7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fa18 	bl	80040f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0208 	orr.w	r2, r2, #8
 8003cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0204 	bic.w	r2, r2, #4
 8003ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6999      	ldr	r1, [r3, #24]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	619a      	str	r2, [r3, #24]
      break;
 8003cf6:	e064      	b.n	8003dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fa68 	bl	80041d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6999      	ldr	r1, [r3, #24]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	021a      	lsls	r2, r3, #8
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	619a      	str	r2, [r3, #24]
      break;
 8003d38:	e043      	b.n	8003dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fabd 	bl	80042c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0208 	orr.w	r2, r2, #8
 8003d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0204 	bic.w	r2, r2, #4
 8003d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69d9      	ldr	r1, [r3, #28]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	61da      	str	r2, [r3, #28]
      break;
 8003d78:	e023      	b.n	8003dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fb11 	bl	80043a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69d9      	ldr	r1, [r3, #28]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	021a      	lsls	r2, r3, #8
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	61da      	str	r2, [r3, #28]
      break;
 8003dba:	e002      	b.n	8003dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_TIM_ConfigClockSource+0x1c>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e0b4      	b.n	8003f5a <HAL_TIM_ConfigClockSource+0x186>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e28:	d03e      	beq.n	8003ea8 <HAL_TIM_ConfigClockSource+0xd4>
 8003e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e2e:	f200 8087 	bhi.w	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e36:	f000 8086 	beq.w	8003f46 <HAL_TIM_ConfigClockSource+0x172>
 8003e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3e:	d87f      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e40:	2b70      	cmp	r3, #112	; 0x70
 8003e42:	d01a      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0xa6>
 8003e44:	2b70      	cmp	r3, #112	; 0x70
 8003e46:	d87b      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e48:	2b60      	cmp	r3, #96	; 0x60
 8003e4a:	d050      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0x11a>
 8003e4c:	2b60      	cmp	r3, #96	; 0x60
 8003e4e:	d877      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	2b50      	cmp	r3, #80	; 0x50
 8003e52:	d03c      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0xfa>
 8003e54:	2b50      	cmp	r3, #80	; 0x50
 8003e56:	d873      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d058      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x13a>
 8003e5c:	2b40      	cmp	r3, #64	; 0x40
 8003e5e:	d86f      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e60:	2b30      	cmp	r3, #48	; 0x30
 8003e62:	d064      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x15a>
 8003e64:	2b30      	cmp	r3, #48	; 0x30
 8003e66:	d86b      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d060      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x15a>
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d867      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d05c      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x15a>
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d05a      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x15a>
 8003e78:	e062      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6899      	ldr	r1, [r3, #8]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f000 fb5d 	bl	8004548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	609a      	str	r2, [r3, #8]
      break;
 8003ea6:	e04f      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	6899      	ldr	r1, [r3, #8]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f000 fb46 	bl	8004548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eca:	609a      	str	r2, [r3, #8]
      break;
 8003ecc:	e03c      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6859      	ldr	r1, [r3, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f000 faba 	bl	8004454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2150      	movs	r1, #80	; 0x50
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fb13 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 8003eec:	e02c      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f000 fad9 	bl	80044b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2160      	movs	r1, #96	; 0x60
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fb03 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 8003f0c:	e01c      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f000 fa9a 	bl	8004454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2140      	movs	r1, #64	; 0x40
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 faf3 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 8003f2c:	e00c      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f000 faea 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 8003f3e:	e003      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
      break;
 8003f44:	e000      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a40      	ldr	r2, [pc, #256]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d00f      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3d      	ldr	r2, [pc, #244]	; (80040cc <TIM_Base_SetConfig+0x118>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3c      	ldr	r2, [pc, #240]	; (80040d0 <TIM_Base_SetConfig+0x11c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d007      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3b      	ldr	r2, [pc, #236]	; (80040d4 <TIM_Base_SetConfig+0x120>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3a      	ldr	r2, [pc, #232]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d108      	bne.n	8004006 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2f      	ldr	r2, [pc, #188]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d02b      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d027      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <TIM_Base_SetConfig+0x118>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d023      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2b      	ldr	r2, [pc, #172]	; (80040d0 <TIM_Base_SetConfig+0x11c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01f      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <TIM_Base_SetConfig+0x120>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01b      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d017      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a28      	ldr	r2, [pc, #160]	; (80040dc <TIM_Base_SetConfig+0x128>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d013      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <TIM_Base_SetConfig+0x12c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00f      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <TIM_Base_SetConfig+0x130>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00b      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a25      	ldr	r2, [pc, #148]	; (80040e8 <TIM_Base_SetConfig+0x134>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d007      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a24      	ldr	r2, [pc, #144]	; (80040ec <TIM_Base_SetConfig+0x138>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d003      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <TIM_Base_SetConfig+0x13c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d108      	bne.n	8004078 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a0a      	ldr	r2, [pc, #40]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <TIM_Base_SetConfig+0xf8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a0c      	ldr	r2, [pc, #48]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d103      	bne.n	80040b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	615a      	str	r2, [r3, #20]
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40000400 	.word	0x40000400
 80040d0:	40000800 	.word	0x40000800
 80040d4:	40000c00 	.word	0x40000c00
 80040d8:	40010400 	.word	0x40010400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800
 80040e8:	40001800 	.word	0x40001800
 80040ec:	40001c00 	.word	0x40001c00
 80040f0:	40002000 	.word	0x40002000

080040f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0201 	bic.w	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f023 0302 	bic.w	r3, r3, #2
 800413c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a20      	ldr	r2, [pc, #128]	; (80041cc <TIM_OC1_SetConfig+0xd8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_OC1_SetConfig+0x64>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a1f      	ldr	r2, [pc, #124]	; (80041d0 <TIM_OC1_SetConfig+0xdc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10c      	bne.n	8004172 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0308 	bic.w	r3, r3, #8
 800415e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f023 0304 	bic.w	r3, r3, #4
 8004170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a15      	ldr	r2, [pc, #84]	; (80041cc <TIM_OC1_SetConfig+0xd8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_OC1_SetConfig+0x8e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a14      	ldr	r2, [pc, #80]	; (80041d0 <TIM_OC1_SetConfig+0xdc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d111      	bne.n	80041a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40010400 	.word	0x40010400

080041d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f023 0210 	bic.w	r2, r3, #16
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 0320 	bic.w	r3, r3, #32
 800421e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <TIM_OC2_SetConfig+0xe4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_OC2_SetConfig+0x68>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a21      	ldr	r2, [pc, #132]	; (80042bc <TIM_OC2_SetConfig+0xe8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d10d      	bne.n	8004258 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004256:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <TIM_OC2_SetConfig+0xe4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_OC2_SetConfig+0x94>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <TIM_OC2_SetConfig+0xe8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d113      	bne.n	8004290 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800426e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40010000 	.word	0x40010000
 80042bc:	40010400 	.word	0x40010400

080042c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a21      	ldr	r2, [pc, #132]	; (80043a0 <TIM_OC3_SetConfig+0xe0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_OC3_SetConfig+0x66>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a20      	ldr	r2, [pc, #128]	; (80043a4 <TIM_OC3_SetConfig+0xe4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10d      	bne.n	8004342 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800432c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <TIM_OC3_SetConfig+0xe0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_OC3_SetConfig+0x92>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a15      	ldr	r2, [pc, #84]	; (80043a4 <TIM_OC3_SetConfig+0xe4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d113      	bne.n	800437a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	621a      	str	r2, [r3, #32]
}
 8004394:	bf00      	nop
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	40010000 	.word	0x40010000
 80043a4:	40010400 	.word	0x40010400

080043a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	031b      	lsls	r3, r3, #12
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a12      	ldr	r2, [pc, #72]	; (800444c <TIM_OC4_SetConfig+0xa4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_OC4_SetConfig+0x68>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a11      	ldr	r2, [pc, #68]	; (8004450 <TIM_OC4_SetConfig+0xa8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d109      	bne.n	8004424 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	019b      	lsls	r3, r3, #6
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40010000 	.word	0x40010000
 8004450:	40010400 	.word	0x40010400

08004454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f023 0201 	bic.w	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 030a 	bic.w	r3, r3, #10
 8004490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b087      	sub	sp, #28
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f023 0210 	bic.w	r2, r3, #16
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	031b      	lsls	r3, r3, #12
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	f043 0307 	orr.w	r3, r3, #7
 8004534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	609a      	str	r2, [r3, #8]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	021a      	lsls	r2, r3, #8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	431a      	orrs	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4313      	orrs	r3, r2
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	2201      	movs	r2, #1
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1a      	ldr	r2, [r3, #32]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	43db      	mvns	r3, r3
 80045aa:	401a      	ands	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1a      	ldr	r2, [r3, #32]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	fa01 f303 	lsl.w	r3, r1, r3
 80045c0:	431a      	orrs	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e05a      	b.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a21      	ldr	r2, [pc, #132]	; (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d022      	beq.n	8004676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004638:	d01d      	beq.n	8004676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1d      	ldr	r2, [pc, #116]	; (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d018      	beq.n	8004676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1b      	ldr	r2, [pc, #108]	; (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1a      	ldr	r2, [pc, #104]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00e      	beq.n	8004676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d009      	beq.n	8004676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d004      	beq.n	8004676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d10c      	bne.n	8004690 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800467c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	4313      	orrs	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40010400 	.word	0x40010400
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40001800 	.word	0x40001800

080046cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <__libc_init_array>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	4d0d      	ldr	r5, [pc, #52]	; (800472c <__libc_init_array+0x38>)
 80046f8:	4c0d      	ldr	r4, [pc, #52]	; (8004730 <__libc_init_array+0x3c>)
 80046fa:	1b64      	subs	r4, r4, r5
 80046fc:	10a4      	asrs	r4, r4, #2
 80046fe:	2600      	movs	r6, #0
 8004700:	42a6      	cmp	r6, r4
 8004702:	d109      	bne.n	8004718 <__libc_init_array+0x24>
 8004704:	4d0b      	ldr	r5, [pc, #44]	; (8004734 <__libc_init_array+0x40>)
 8004706:	4c0c      	ldr	r4, [pc, #48]	; (8004738 <__libc_init_array+0x44>)
 8004708:	f000 f820 	bl	800474c <_init>
 800470c:	1b64      	subs	r4, r4, r5
 800470e:	10a4      	asrs	r4, r4, #2
 8004710:	2600      	movs	r6, #0
 8004712:	42a6      	cmp	r6, r4
 8004714:	d105      	bne.n	8004722 <__libc_init_array+0x2e>
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	f855 3b04 	ldr.w	r3, [r5], #4
 800471c:	4798      	blx	r3
 800471e:	3601      	adds	r6, #1
 8004720:	e7ee      	b.n	8004700 <__libc_init_array+0xc>
 8004722:	f855 3b04 	ldr.w	r3, [r5], #4
 8004726:	4798      	blx	r3
 8004728:	3601      	adds	r6, #1
 800472a:	e7f2      	b.n	8004712 <__libc_init_array+0x1e>
 800472c:	08004784 	.word	0x08004784
 8004730:	08004784 	.word	0x08004784
 8004734:	08004784 	.word	0x08004784
 8004738:	08004788 	.word	0x08004788

0800473c <memset>:
 800473c:	4402      	add	r2, r0
 800473e:	4603      	mov	r3, r0
 8004740:	4293      	cmp	r3, r2
 8004742:	d100      	bne.n	8004746 <memset+0xa>
 8004744:	4770      	bx	lr
 8004746:	f803 1b01 	strb.w	r1, [r3], #1
 800474a:	e7f9      	b.n	8004740 <memset+0x4>

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
